{"name": "mbpp_100_next_smallest_palindrome", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Next_Smallest_Palindrome (N : Integer) return Integer;\n   -- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\n\n   function Next_Smallest_Palindrome (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Next_Smallest_Palindrome;"]}
{"name": "mbpp_102_snake_to_camel", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Snake_To_Camel (W : String) return String;\n   -- Write a function to convert a snake case string to camel case string.\n\n\n   function Snake_To_Camel (W : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Snake_To_Camel;"]}
{"name": "mbpp_103_eulerian_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Eulerian_Num (N : Integer; M : Integer) return Integer;\n   -- Write a function to find the Eulerian number a(n, m).\n\n\n   function Eulerian_Num (N : Integer; M : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Eulerian_Num;"]}
{"name": "mbpp_109_odd_Equivalent", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Odd_Equivalent (S : String; N : Integer) return Integer;\n   -- Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n\n   function Odd_Equivalent (S : String; N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Odd_Equivalent;"]}
{"name": "mbpp_113_check_integer", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Integer (T : String) return Boolean;\n   -- Write a function to check if a string represents an integer or not.\n\n\n   function Check_Integer (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Integer;"]}
{"name": "mbpp_11_remove_Occ", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Occ (S : String; C : String) return String;\n   -- Write a python function to remove first and last occurrence of a given character from the string.\n\n\n   function Remove_Occ (S : String; C : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Occ;"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Amicable_Numbers_Sum (L : Integer) return Integer;\n   -- Write a function to sum all amicable numbers from 1 to a specified number.\n\n\n   function Amicable_Numbers_Sum (L : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Amicable_Numbers_Sum;"]}
{"name": "mbpp_125_find_length", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Length (S : String) return Integer;\n   -- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n\n   function Find_Length (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Length;"]}
{"name": "mbpp_126_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum (A : Integer; B : Integer) return Integer;\n   -- Write a python function to find the sum of common divisors of two given numbers.\n\n\n   function Sum (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum;"]}
{"name": "mbpp_127_multiply_int", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Multiply_Int (X : Integer; Y : Integer) return Integer;\n   -- Write a function to multiply two integers.\n\n\n   function Multiply_Int (X : Integer; Y : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Multiply_Int;"]}
{"name": "mbpp_131_reverse_vowels", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Reverse_Vowels (S : String) return String;\n   -- Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n\n\n   function Reverse_Vowels (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Reverse_Vowels;"]}
{"name": "mbpp_135_hexagonal_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Hexagonal_Num (N : Integer) return Integer;\n   -- Write a function to find the nth hexagonal number.\n\n\n   function Hexagonal_Num (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Hexagonal_Num;"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Sum_Of_Powers_Of_Two (N : Integer) return Boolean;\n   -- Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n\n   function Is_Sum_Of_Powers_Of_Two (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Sum_Of_Powers_Of_Two;"]}
{"name": "mbpp_14_find_Volume", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Volume (L : Integer; B : Integer; H : Integer) return Integer;\n   -- Write a python function to find the volume of a triangular prism.\n\n\n   function Find_Volume (L : Integer; B : Integer; H : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Volume;"]}
{"name": "mbpp_162_sum_series", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum_Series (N : Integer) return Integer;\n   -- Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n\n   function Sum_Series (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum_Series;"]}
{"name": "mbpp_164_are_equivalent", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Are_Equivalent (N : Integer; N : Integer) return Boolean;\n   -- Write a function to determine if the sum of the divisors of two integers are the same.\n\n\n   function Are_Equivalent (N : Integer; N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Are_Equivalent;"]}
{"name": "mbpp_165_count_char_position", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Char_Position (S : String) return Integer;\n   -- Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n\n   function Count_Char_Position (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Char_Position;"]}
{"name": "mbpp_167_next_power_of_2", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Next_Power_Of_2 (N : Integer) return Integer;\n   -- Write a python function to find the smallest power of 2 greater than or equal to n.\n\n\n   function Next_Power_Of_2 (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Next_Power_Of_2;"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Lowercase_Underscore (T : String) return Boolean;\n   -- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n\n   function Text_Lowercase_Underscore (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Lowercase_Underscore;"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Perimeter_Pentagon (A : Integer) return Integer;\n   -- Write a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\n   function Perimeter_Pentagon (A : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Perimeter_Pentagon;"]}
{"name": "mbpp_172_count_occurance", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Occurance (S : String) return Integer;\n   -- Write a function to count the number of occurence of the string 'std' in a given string.\n\n\n   function Count_Occurance (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Occurance;"]}
{"name": "mbpp_17_square_perimeter", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Square_Perimeter (A : Integer) return Integer;\n   -- Write a function that returns the perimeter of a square given its side length as input.\n\n\n   function Square_Perimeter (A : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Square_Perimeter;"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Dirty_Chars (S : String; S : String) return String;\n   -- Write a function to remove characters from the first string which are present in the second string.\n\n\n   function Remove_Dirty_Chars (S : String; S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Dirty_Chars;"]}
{"name": "mbpp_20_is_woodall", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Woodall (X : Integer) return Boolean;\n   -- Write a function to check if the given number is woodball or not.\n\n\n   function Is_Woodall (X : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Woodall;"]}
{"name": "mbpp_224_count_Set_Bits", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Set_Bits (N : Integer) return Integer;\n   -- Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\n\n   function Count_Set_Bits (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Set_Bits;"]}
{"name": "mbpp_226_odd_values_string", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Odd_Values_String (S : String) return String;\n   -- Write a python function to remove the characters which have odd index values of a given string.\n\n\n   function Odd_Values_String (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Odd_Values_String;"]}
{"name": "mbpp_227_min_of_three", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Min_Of_Three (A : Integer; B : Integer; C : Integer) return Integer;\n   -- Write a function to find minimum of three numbers.\n\n\n   function Min_Of_Three (A : Integer; B : Integer; C : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Min_Of_Three;"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function All_Bits_Set_In_The_Given_Range (N : Integer; L : Integer; R : Integer) return Boolean;\n   -- Write a python function to check whether all the bits are unset in the given range or not.\n\n\n   function All_Bits_Set_In_The_Given_Range (N : Integer; L : Integer; R : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end All_Bits_Set_In_The_Given_Range;"]}
{"name": "mbpp_230_replace_blank", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Replace_Blank (S : String; C : String) return String;\n   -- Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n\n   function Replace_Blank (S : String; C : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Replace_Blank;"]}
{"name": "mbpp_234_volume_cube", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Volume_Cube (L : Integer) return Integer;\n   -- Write a function to find the volume of a cube given its side length.\n\n\n   function Volume_Cube (L : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Volume_Cube;"]}
{"name": "mbpp_238_number_of_substrings", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Number_Of_Substrings (S : String) return Integer;\n   -- Write a python function to count the number of non-empty substrings of a given string.\n\n\n   function Number_Of_Substrings (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Number_Of_Substrings;"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Get_Total_Number_Of_Sequences (M : Integer; N : Integer) return Integer;\n   -- Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n\n   function Get_Total_Number_Of_Sequences (M : Integer; N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Get_Total_Number_Of_Sequences;"]}
{"name": "mbpp_242_count_charac", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Charac (S : String) return Integer;\n   -- Write a function to count the total number of characters in a string.\n\n\n   function Count_Charac (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Charac;"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Next_Perfect_Square (N : Integer) return Integer;\n   -- Write a python function to find the next perfect square greater than a given number.\n\n\n   function Next_Perfect_Square (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Next_Perfect_Square;"]}
{"name": "mbpp_247_lps", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Lps (S : String) return Integer;\n   -- Write a function to find the length of the longest palindromic subsequence in the given string.\n\n\n   function Lps (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Lps;"]}
{"name": "mbpp_256_count_Primes_nums", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Primes_Nums (N : Integer) return Integer;\n   -- Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n\n   function Count_Primes_Nums (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Primes_Nums;"]}
{"name": "mbpp_260_newman_prime", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Newman_Prime (N : Integer) return Integer;\n   -- Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n\n   function Newman_Prime (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Newman_Prime;"]}
{"name": "mbpp_264_dog_age", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Dog_Age (H : Integer) return Integer;\n   -- Write a function to calculate a dog's age in dog's years.\n\n\n   function Dog_Age (H : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Dog_Age;"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Lateralsurface_Cube (L : Integer) return Integer;\n   -- Write a function to find the lateral surface area of a cube given its side length.\n\n\n   function Lateralsurface_Cube (L : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Lateralsurface_Cube;"]}
{"name": "mbpp_267_square_Sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Square_Sum (N : Integer) return Integer;\n   -- Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n\n   function Square_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Square_Sum;"]}
{"name": "mbpp_268_find_star_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Star_Num (N : Integer) return Integer;\n   -- Write a function to find the n'th star number.\n\n\n   function Find_Star_Num (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Star_Num;"]}
{"name": "mbpp_269_ascii_value", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Ascii_Value (K : String) return Integer;\n   -- Write a function to find the ascii value of a character.\n\n\n   function Ascii_Value (K : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Ascii_Value;"]}
{"name": "mbpp_271_even_Power_Sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Even_Power_Sum (N : Integer) return Integer;\n   -- Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n\n   function Even_Power_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Even_Power_Sum;"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Even_Binomial_Coeff_Sum (N : Integer) return Integer;\n   -- Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n\n   function Even_Binomial_Coeff_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Even_Binomial_Coeff_Sum;"]}
{"name": "mbpp_279_is_num_decagonal", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Num_Decagonal (N : Integer) return Integer;\n   -- Write a function to find the nth decagonal number.\n\n\n   function Is_Num_Decagonal (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Num_Decagonal;"]}
{"name": "mbpp_283_validate", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Validate (N : Integer) return Boolean;\n   -- Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n\n   function Validate (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Validate;"]}
{"name": "mbpp_285_text_match_two_three", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_Two_Three (T : String) return Boolean;\n   -- Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n\n   function Text_Match_Two_Three (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_Two_Three;"]}
{"name": "mbpp_287_square_Sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Square_Sum (N : Integer) return Integer;\n   -- Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n\n   function Square_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Square_Sum;"]}
{"name": "mbpp_291_count_no_of_ways", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_No_Of_Ways (N : Integer; K : Integer) return Integer;\n   -- Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n\n   function Count_No_Of_Ways (N : Integer; K : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_No_Of_Ways;"]}
{"name": "mbpp_292_find", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find (N : Integer; M : Integer) return Integer;\n   -- Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n\n   function Find (N : Integer; M : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find;"]}
{"name": "mbpp_293_otherside_rightangle", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Otherside_Rightangle (W : Integer; H : Integer) return Float;\n   -- Write a function to find the third side of a right angled triangle.\n\n\n   function Otherside_Rightangle (W : Integer; H : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Otherside_Rightangle;"]}
{"name": "mbpp_295_sum_div", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum_Div (N : Integer) return Integer;\n   -- Write a function to return the sum of all divisors of a number.\n\n\n   function Sum_Div (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum_Div;"]}
{"name": "mbpp_309_maximum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Maximum (A : Integer; B : Integer) return Integer;\n   -- Write a python function to find the maximum of two numbers.\n\n\n   function Maximum (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Maximum;"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Highest_Power_Of_2 (N : Integer) return Integer;\n   -- Write a python function to find the highest power of 2 that is less than or equal to n.\n\n\n   function Highest_Power_Of_2 (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Highest_Power_Of_2;"]}
{"name": "mbpp_389_find_lucas", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Lucas (N : Integer) return Integer;\n   -- Write a function to find the n'th lucas number.\n\n\n   function Find_Lucas (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Lucas;"]}
{"name": "mbpp_392_get_max_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Get_Max_Sum (N : Integer) return Integer;\n   -- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n\n   function Get_Max_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Get_Max_Sum;"]}
{"name": "mbpp_396_check_char", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Char (S : String) return String;\n   -- Write a function to check whether the given string starts and ends with the same character or not.\n\n\n   function Check_Char (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Char;"]}
{"name": "mbpp_397_median_numbers", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Median_Numbers (A : Integer; B : Integer; C : Integer) return Float;\n   -- Write a function to find the median of three numbers.\n\n\n   function Median_Numbers (A : Integer; B : Integer; C : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Median_Numbers;"]}
{"name": "mbpp_3_is_not_prime", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Not_Prime (N : Integer) return Boolean;\n   -- Write a python function to identify non-prime numbers.\n\n\n   function Is_Not_Prime (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Not_Prime;"]}
{"name": "mbpp_404_minimum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Minimum (A : Integer; B : Integer) return Integer;\n   -- Write a python function to find the minimum of two numbers.\n\n\n   function Minimum (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Minimum;"]}
{"name": "mbpp_406_find_Parity", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Parity (X : Integer) return Boolean;\n   -- Write a python function to find whether the parity of a given number is odd.\n\n\n   function Find_Parity (X : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Parity;"]}
{"name": "mbpp_411_snake_to_camel", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Snake_To_Camel (W : String) return String;\n   -- Write a function to convert the given snake case string to camel case string.\n\n\n   function Snake_To_Camel (W : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Snake_To_Camel;"]}
{"name": "mbpp_420_cube_Sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Cube_Sum (N : Integer) return Integer;\n   -- Write a python function to find the cube sum of first n even natural numbers.\n\n\n   function Cube_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Cube_Sum;"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Average_Of_Cube (N : Integer) return Float;\n   -- Write a python function to find the average of cubes of first n natural numbers.\n\n\n   function Find_Average_Of_Cube (N : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Average_Of_Cube;"]}
{"name": "mbpp_427_change_date_format", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Change_Date_Format (D : String) return String;\n   -- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n\n   function Change_Date_Format (D : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Change_Date_Format;"]}
{"name": "mbpp_430_parabola_directrix", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Parabola_Directrix (A : Integer; B : Integer; C : Integer) return Integer;\n   -- Write a function to find the directrix of a parabola.\n\n\n   function Parabola_Directrix (A : Integer; B : Integer; C : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Parabola_Directrix;"]}
{"name": "mbpp_432_median_trapezium", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Median_Trapezium (B : Integer; B : Integer; H : Integer) return Float;\n   -- Write a function to find the median length of a trapezium.\n\n\n   function Median_Trapezium (B : Integer; B : Integer; H : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Median_Trapezium;"]}
{"name": "mbpp_434_text_match_one", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_One (T : String) return Boolean;\n   -- Write a function that matches a string that has an a followed by one or more b's.\n\n\n   function Text_Match_One (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_One;"]}
{"name": "mbpp_435_last_Digit", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Last_Digit (N : Integer) return Integer;\n   -- Write a python function to find the last digit of a given number.\n\n\n   function Last_Digit (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Last_Digit;"]}
{"name": "mbpp_437_remove_odd", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Odd (S : String) return String;\n   -- Write a function to remove odd characters in a string.\n\n\n   function Remove_Odd (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Odd;"]}
{"name": "mbpp_441_surfacearea_cube", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Surfacearea_Cube (L : Integer) return Integer;\n   -- Write a function to find the surface area of a cube of a given size.\n\n\n   function Surfacearea_Cube (L : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Surfacearea_Cube;"]}
{"name": "mbpp_448_cal_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Cal_Sum (N : Integer) return Integer;\n   -- Write a function to calculate the sum of perrin numbers.\n\n\n   function Cal_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Cal_Sum;"]}
{"name": "mbpp_451_remove_whitespaces", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Whitespaces (T : String) return String;\n   -- Write a function to remove all whitespaces from the given string.\n\n\n   function Remove_Whitespaces (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Whitespaces;"]}
{"name": "mbpp_452_loss_amount", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Loss_Amount (A : Integer; S : Integer) return Integer;\n   -- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n\n   function Loss_Amount (A : Integer; S : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Loss_Amount;"]}
{"name": "mbpp_453_sumofFactors", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sumof_Factors (N : Integer) return Integer;\n   -- Write a python function to find the sum of even factors of a number.\n\n\n   function Sumof_Factors (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sumof_Factors;"]}
{"name": "mbpp_454_text_match_wordz", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_Wordz (T : String) return Boolean;\n   -- Write a function that matches a word containing 'z'.\n\n\n   function Text_Match_Wordz (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_Wordz;"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Monthnumb_Number (M : Integer) return Boolean;\n   -- Write a function to check whether the given month number contains 31 days or not.\n\n\n   function Check_Monthnumb_Number (M : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Monthnumb_Number;"]}
{"name": "mbpp_458_rectangle_area", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Rectangle_Area (L : Integer; B : Integer) return Integer;\n   -- Write a function to find the area of a rectangle.\n\n\n   function Rectangle_Area (L : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Rectangle_Area;"]}
{"name": "mbpp_459_remove_uppercase", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Uppercase (S : String) return String;\n   -- Write a function to remove uppercase substrings from a given string.\n\n\n   function Remove_Uppercase (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Uppercase;"]}
{"name": "mbpp_461_upper_ctr", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Upper_Ctr (S : String) return Integer;\n   -- Write a python function to count the upper case characters in a given string.\n\n\n   function Upper_Ctr (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Upper_Ctr;"]}
{"name": "mbpp_474_replace_char", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Replace_Char (S : String; C : String; N : String) return String;\n   -- Write a function to replace characters in a string.\n\n\n   function Replace_Char (S : String; C : String; N : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Replace_Char;"]}
{"name": "mbpp_477_is_lower", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Lower (S : String) return String;\n   -- Write a python function to convert the given string to lower case.\n\n\n   function Is_Lower (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Lower;"]}
{"name": "mbpp_478_remove_lowercase", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Lowercase (S : String) return String;\n   -- Write a function to remove lowercase substrings from a given string.\n\n\n   function Remove_Lowercase (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Lowercase;"]}
{"name": "mbpp_479_first_Digit", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function First_Digit (N : Integer) return Integer;\n   -- Write a python function to find the first digit of a given number.\n\n\n   function First_Digit (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end First_Digit;"]}
{"name": "mbpp_555_difference", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Difference (N : Integer) return Integer;\n   -- Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n\n   function Difference (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Difference;"]}
{"name": "mbpp_557_toggle_string", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Toggle_String (S : String) return String;\n   -- Write a function to toggle the case of all characters in a string.\n\n\n   function Toggle_String (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Toggle_String;"]}
{"name": "mbpp_558_digit_distance_nums", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Digit_Distance_Nums (N : Integer; N : Integer) return Integer;\n   -- Write a python function to find the sum of the per-digit difference between two integers.\n\n\n   function Digit_Distance_Nums (N : Integer; N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Digit_Distance_Nums;"]}
{"name": "mbpp_566_sum_digits", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum_Digits (N : Integer) return Integer;\n   -- Write a function to get the sum of the digits of a non-negative integer.\n\n\n   function Sum_Digits (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum_Digits;"]}
{"name": "mbpp_56_checks", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Checks (N : Integer) return Boolean;\n   -- Write a python function to check if a given number is one less than twice its reverse.\n\n\n   function Checks (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Checks;"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Surfacearea_Cylinder (R : Integer; H : Integer) return Float;\n   -- Write a function to find the surface area of a cylinder.\n\n\n   function Surfacearea_Cylinder (R : Integer; H : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Surfacearea_Cylinder;"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Last_Digit_Factorial (N : Integer) return Integer;\n   -- Write a python function to find the last digit in factorial of a given number.\n\n\n   function Last_Digit_Factorial (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Last_Digit_Factorial;"]}
{"name": "mbpp_581_surface_Area", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Surface_Area (B : Integer; S : Integer) return Integer;\n   -- Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\n\n   function Surface_Area (B : Integer; S : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Surface_Area;"]}
{"name": "mbpp_583_catalan_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Catalan_Number (N : Integer) return Integer;\n   -- Write a function which returns nth catalan number.\n\n\n   function Catalan_Number (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Catalan_Number;"]}
{"name": "mbpp_584_find_adverbs", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Adverbs (T : String) return String;\n   -- Write a function to find the first adverb ending with ly and its positions in a given string.\n\n\n   function Find_Adverbs (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Adverbs;"]}
{"name": "mbpp_58_opposite_Signs", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Opposite_Signs (X : Integer; Y : Integer) return Boolean;\n   -- Write a python function to check whether the given two integers have opposite sign or not.\n\n\n   function Opposite_Signs (X : Integer; Y : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Opposite_Signs;"]}
{"name": "mbpp_592_sum_Of_product", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum_Of_Product (N : Integer) return Integer;\n   -- Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n\n   function Sum_Of_Product (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum_Of_Product;"]}
{"name": "mbpp_593_removezero_ip", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Removezero_Ip (I : String) return String;\n   -- Write a function to remove leading zeroes from an ip address.\n\n\n   function Removezero_Ip (I : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Removezero_Ip;"]}
{"name": "mbpp_598_armstrong_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Armstrong_Number (N : Integer) return Boolean;\n   -- Write a function to check whether the given number is armstrong or not.\n\n\n   function Armstrong_Number (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Armstrong_Number;"]}
{"name": "mbpp_59_is_octagonal", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Octagonal (N : Integer) return Integer;\n   -- Write a function to find the nth octagonal number.\n\n\n   function Is_Octagonal (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Octagonal;"]}
{"name": "mbpp_600_is_Even", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Even (N : Integer) return Boolean;\n   -- Write a python function to check whether the given number is even or not.\n\n\n   function Is_Even (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Even;"]}
{"name": "mbpp_604_reverse_words", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Reverse_Words (S : String) return String;\n   -- Write a function to reverse words seperated by spaces in a given string.\n\n\n   function Reverse_Words (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Reverse_Words;"]}
{"name": "mbpp_605_prime_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Prime_Num (N : Integer) return Boolean;\n   -- Write a function to check if the given integer is a prime number.\n\n\n   function Prime_Num (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Prime_Num;"]}
{"name": "mbpp_606_radian_degree", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Radian_Degree (D : Integer) return Float;\n   -- Write a function to convert degrees to radians.\n\n\n   function Radian_Degree (D : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Radian_Degree;"]}
{"name": "mbpp_608_bell_Number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Bell_Number (N : Integer) return Integer;\n   -- Write a python function to find nth bell number.\n\n\n   function Bell_Number (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Bell_Number;"]}
{"name": "mbpp_619_move_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Move_Num (T : String) return String;\n   -- Write a function to move all the numbers to the end of the given string.\n\n\n   function Move_Num (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Move_Num;"]}
{"name": "mbpp_61_count_Substrings", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Substrings (S : String) return Integer;\n   -- Write a python function to count the number of substrings with the sum of digits equal to their length.\n\n\n   function Count_Substrings (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Substrings;"]}
{"name": "mbpp_624_is_upper", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Upper (S : String) return String;\n   -- Write a python function to convert a given string to uppercase.\n\n\n   function Is_Upper (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Upper;"]}
{"name": "mbpp_628_replace_spaces", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Replace_Spaces (S : String) return String;\n   -- Write a function to replace all spaces in the given string with '%20'.\n\n\n   function Replace_Spaces (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Replace_Spaces;"]}
{"name": "mbpp_631_replace_spaces", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Replace_Spaces (T : String) return String;\n   -- Write a function to replace whitespaces with an underscore and vice versa in a given string.\n\n\n   function Replace_Spaces (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Replace_Spaces;"]}
{"name": "mbpp_637_noprofit_noloss", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Noprofit_Noloss (A : Integer; S : Integer) return Boolean;\n   -- Write a function to check whether the given amount has no profit and no loss\n\n\n   function Noprofit_Noloss (A : Integer; S : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Noprofit_Noloss;"]}
{"name": "mbpp_638_wind_chill", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Wind_Chill (V : Integer; T : Integer) return Integer;\n   -- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n\n   function Wind_Chill (V : Integer; T : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Wind_Chill;"]}
{"name": "mbpp_641_is_nonagonal", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Nonagonal (N : Integer) return Integer;\n   -- Write a function to find the nth nonagonal number.\n\n\n   function Is_Nonagonal (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Nonagonal;"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_Wordz_Middle (T : String) return Boolean;\n   -- Write a function that checks if a strings contains 'z', except at the start and end of the word.\n\n\n   function Text_Match_Wordz_Middle (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_Wordz_Middle;"]}
{"name": "mbpp_67_bell_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Bell_Number (N : Integer) return Integer;\n   -- Write a function to find the number of ways to partition a set of Bell numbers.\n\n\n   function Bell_Number (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Bell_Number;"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Differ_At_One_Bit_Pos (A : Integer; B : Integer) return Boolean;\n   -- Write a python function to check whether the two numbers differ at one bit position only or not.\n\n\n   function Differ_At_One_Bit_Pos (A : Integer; B : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Differ_At_One_Bit_Pos;"]}
{"name": "mbpp_724_power_base_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Power_Base_Sum (B : Integer; P : Integer) return Integer;\n   -- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\n\n   function Power_Base_Sum (B : Integer; P : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Power_Base_Sum;"]}
{"name": "mbpp_72_dif_Square", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Dif_Square (N : Integer) return Boolean;\n   -- Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\n\n   function Dif_Square (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Dif_Square;"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Lateralsurface_Cone (R : Integer; H : Integer) return Float;\n   -- Write a function to find the lateral surface area of a cone given radius r and the height h.\n\n\n   function Lateralsurface_Cone (R : Integer; H : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Lateralsurface_Cone;"]}
{"name": "mbpp_732_replace_specialchar", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Replace_Specialchar (T : String) return String;\n   -- Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n\n   function Replace_Specialchar (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Replace_Specialchar;"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Toggle_Middle_Bits (N : Integer) return Integer;\n   -- Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n\n   function Toggle_Middle_Bits (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Toggle_Middle_Bits;"]}
{"name": "mbpp_737_check_str", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Str (S : String) return Boolean;\n   -- Write a function to check whether the given string is starting with a vowel or not using regex.\n\n\n   function Check_Str (S : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Str;"]}
{"name": "mbpp_738_geometric_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Geometric_Sum (N : Integer) return Float;\n   -- Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\n\n   function Geometric_Sum (N : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Geometric_Sum;"]}
{"name": "mbpp_739_find_Index", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Index (N : Integer) return Integer;\n   -- Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\n\n   function Find_Index (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Index;"]}
{"name": "mbpp_741_all_Characters_Same", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function All_Characters_Same (S : String) return Boolean;\n   -- Write a python function to check whether all the characters are same or not.\n\n\n   function All_Characters_Same (S : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end All_Characters_Same;"]}
{"name": "mbpp_742_area_tetrahedron", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Area_Tetrahedron (S : Integer) return Float;\n   -- Write a function to caluclate the area of a tetrahedron.\n\n\n   function Area_Tetrahedron (S : Integer) return Float", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Area_Tetrahedron;"]}
{"name": "mbpp_747_lcs_of_three", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Lcs_Of_Three (X : String; Y : String; Z : String) return Integer;\n   -- Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n\n   function Lcs_Of_Three (X : String; Y : String; Z : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Lcs_Of_Three;"]}
{"name": "mbpp_748_capital_words_spaces", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Capital_Words_Spaces (S : String) return String;\n   -- Write a function to put spaces between words starting with capital letters in a given string.\n\n\n   function Capital_Words_Spaces (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Capital_Words_Spaces;"]}
{"name": "mbpp_752_jacobsthal_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Jacobsthal_Num (N : Integer) return Integer;\n   -- Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n\n   function Jacobsthal_Num (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Jacobsthal_Num;"]}
{"name": "mbpp_756_text_match_zero_one", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_Zero_One (T : String) return Boolean;\n   -- Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\n\n   function Text_Match_Zero_One (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_Zero_One;"]}
{"name": "mbpp_759_is_decimal", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Decimal (N : String) return Boolean;\n   -- Write a function to check whether a given string is a decimal number with a precision of 2.\n\n\n   function Is_Decimal (N : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Decimal;"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Monthnumber_Number (M : Integer) return Boolean;\n   -- Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\n   function Check_Monthnumber_Number (M : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Monthnumber_Number;"]}
{"name": "mbpp_764_number_ctr", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Number_Ctr (S : String) return Integer;\n   -- Write a python function to count number of digits in a given string.\n\n\n   function Number_Ctr (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Number_Ctr;"]}
{"name": "mbpp_765_is_polite", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Polite (N : Integer) return Integer;\n   -- Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\n\n   function Is_Polite (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Polite;"]}
{"name": "mbpp_770_odd_num_sum", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Odd_Num_Sum (N : Integer) return Integer;\n   -- Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n\n   function Odd_Num_Sum (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Odd_Num_Sum;"]}
{"name": "mbpp_771_check_expression", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Check_Expression (E : String) return Boolean;\n   -- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\n\n   function Check_Expression (E : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Check_Expression;"]}
{"name": "mbpp_772_remove_length", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_Length (T : String; K : Integer) return String;\n   -- Write a function to remove all the words with k length in the given string.\n\n\n   function Remove_Length (T : String; K : Integer) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_Length;"]}
{"name": "mbpp_776_count_vowels", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Vowels (T : String) return Integer;\n   -- Write a function to count those characters which have vowels as their neighbors in the given string.\n\n\n   function Count_Vowels (T : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Vowels;"]}
{"name": "mbpp_77_is_Diff", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Diff (N : Integer) return Boolean;\n   -- Write a python function to find whether a number is divisible by 11.\n\n\n   function Is_Diff (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Diff;"]}
{"name": "mbpp_781_count_divisors", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Count_Divisors (N : Integer) return Boolean;\n   -- Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\n\n   function Count_Divisors (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Count_Divisors;"]}
{"name": "mbpp_787_text_match_three", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Match_Three (T : String) return Boolean;\n   -- Write a function that matches a string that has an a followed by three 'b'.\n\n\n   function Text_Match_Three (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Match_Three;"]}
{"name": "mbpp_794_text_starta_endb", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Text_Starta_Endb (T : String) return Boolean;\n   -- Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n\n   function Text_Starta_Endb (T : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Text_Starta_Endb;"]}
{"name": "mbpp_797_sum_in_range", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sum_In_Range (L : Integer; R : Integer) return Integer;\n   -- Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n\n   function Sum_In_Range (L : Integer; R : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sum_In_Range;"]}
{"name": "mbpp_799_left_rotate", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Left_Rotate (N : Integer; D : Integer) return Integer;\n   -- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n\n   function Left_Rotate (N : Integer; D : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Left_Rotate;"]}
{"name": "mbpp_79_word_len", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Word_Len (S : String) return Boolean;\n   -- Write a python function to check whether the length of the word is odd or not.\n\n\n   function Word_Len (S : String) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Word_Len;"]}
{"name": "mbpp_800_remove_all_spaces", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Remove_All_Spaces (T : String) return String;\n   -- Write a function to remove all whitespaces from a string.\n\n\n   function Remove_All_Spaces (T : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Remove_All_Spaces;"]}
{"name": "mbpp_801_test_three_equal", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Test_Three_Equal (X : Integer; Y : Integer; Z : Integer) return Integer;\n   -- Write a python function to count the number of equal numbers from three given integers.\n\n\n   function Test_Three_Equal (X : Integer; Y : Integer; Z : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Test_Three_Equal;"]}
{"name": "mbpp_803_is_perfect_square", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Perfect_Square (N : Integer) return Boolean;\n   -- Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\n\n   function Is_Perfect_Square (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Perfect_Square;"]}
{"name": "mbpp_806_max_run_uppercase", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Max_Run_Uppercase (T : String) return Integer;\n   -- Write a function to find maximum run of uppercase characters in the given string.\n\n\n   function Max_Run_Uppercase (T : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Max_Run_Uppercase;"]}
{"name": "mbpp_80_tetrahedral_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Tetrahedral_Number (N : Integer) return Integer;\n   -- Write a function to find the nth tetrahedral number.\n\n\n   function Tetrahedral_Number (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Tetrahedral_Number;"]}
{"name": "mbpp_83_get_Char", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Get_Char (S : String) return String;\n   -- Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n\n   function Get_Char (S : String) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Get_Char;"]}
{"name": "mbpp_84_sequence", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Sequence (N : Integer) return Integer;\n   -- Write a function to find the nth number in the newman conway sequence.\n\n\n   function Sequence (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Sequence;"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Centered_Hexagonal_Number (N : Integer) return Integer;\n   -- Write a function to find nth centered hexagonal number.\n\n\n   function Centered_Hexagonal_Number (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Centered_Hexagonal_Number;"]}
{"name": "mbpp_89_closest_num", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Closest_Num (N : Integer) return Integer;\n   -- Write a function to find the closest smaller number than n.\n\n\n   function Closest_Num (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Closest_Num;"]}
{"name": "mbpp_92_is_undulating", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Is_Undulating (N : Integer) return Boolean;\n   -- Write a function to check whether the given number is undulating or not.\n\n\n   function Is_Undulating (N : Integer) return Boolean", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Is_Undulating;"]}
{"name": "mbpp_93_power", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Power (A : Integer; B : Integer) return Integer;\n   -- Write a function to calculate the value of 'a' to the power 'b'.\n\n\n   function Power (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Power;"]}
{"name": "mbpp_96_divisor", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Divisor (N : Integer) return Integer;\n   -- Write a python function to find the number of divisors of a given integer.\n\n\n   function Divisor (N : Integer) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Divisor;"]}
{"name": "mbpp_99_decimal_to_binary", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Decimal_To_Binary (N : Integer) return String;\n   -- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n\n   function Decimal_To_Binary (N : Integer) return String", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Decimal_To_Binary;"]}
{"name": "mbpp_9_find_Rotations", "language": "adb", "prompt": "with Ada.Assertions; use Ada.Assertions;\n\nprocedure Main is\n\n   function Find_Rotations (S : String) return Integer;\n   -- Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n\n   function Find_Rotations (S : String) return Integer", "doctests": "keep", "original": "/home/rowan/git/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "begin\n   \nTODO\nTODO\nTODO\nend Test;\n", "stop_tokens": ["end Find_Rotations;"]}
