{"name": "HumanEval_0_has_close_elements", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   function Has_Close_Elements (Numbers : Float_Array; Threshold : Float) return Boolean;\n   -- Check if in given list of numbers, are any two numbers closer to each other than\n   -- given threshold.\n   -- >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n   -- False\n   -- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n   -- True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Has_Close_Elements (Numbers : Float_Array; Threshold : Float) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_0_has_close_elements.py", "prompt_terminology": "verbatim", "tests": "\n   end Has_Close_Elements;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Float_Array; Threshold : Float) return Boolean renames Placeholder.Has_Close_Elements;\n\nbegin\n   pragma Assert (Candidate ((1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.3) = True);\n   pragma Assert (Candidate ((1.0, 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) = False);\n   pragma Assert (Candidate ((1.0, 2.0, 5.9, 4.0, 5.0), 0.95) = True);\n   pragma Assert (Candidate ((1.0, 2.0, 5.9, 4.0, 5.0), 0.8) = False);\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) = True);\n   pragma Assert (Candidate ((1.1, 2.2, 3.1, 4.1, 5.1), 1.0) = True);\n   pragma Assert (Candidate ((1.1, 2.2, 3.1, 4.1, 5.1), 0.5) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_100_make_a_pile", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Make_A_Pile (N : Integer) return Integer_Array;\n   -- Given a positive integer n, you have to make a pile of n levels of stones.\n   -- The first level has n stones.\n   -- The number of stones in the next level is:\n   -- - the next odd number if n is odd.\n   -- - the next even number if n is even.\n   -- Return the number of stones in each level in a list, where element at index\n   -- i represents the number of stones in the level (i+1).\n   -- Examples:\n   -- >>> make_a_pile(3)\n   -- [3, 5, 7]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Make_A_Pile (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_100_make_a_pile.py", "prompt_terminology": "verbatim", "tests": "\n   end Make_A_Pile;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Make_A_Pile;\n\nbegin\n   pragma Assert (Candidate (3) = (3, 5, 7));\n   pragma Assert (Candidate (4) = (4, 6, 8, 10));\n   pragma Assert (Candidate (5) = (5, 7, 9, 11, 13));\n   pragma Assert (Candidate (6) = (6, 8, 10, 12, 14, 16));\n   pragma Assert (Candidate (8) = (8, 10, 12, 14, 16, 18, 20, 22));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_101_words_string", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Words_String (S : String) return Unbounded_String_Array;\n   -- You will be given a string of words separated by commas or spaces. Your task is\n   -- to split the string into words and return an array of the words.\n   -- For example:\n   -- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   -- words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Words_String (S : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_101_words_string.py", "prompt_terminology": "verbatim", "tests": "\n   end Words_String;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Unbounded_String_Array renames Placeholder.Words_String;\n\nbegin\n   pragma Assert (Candidate (\"Hi, my name is John\") = (To_Unbounded_String (\"Hi\"), To_Unbounded_String (\"my\"), To_Unbounded_String (\"name\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"John\")));\n   pragma Assert (Candidate (\"One, two, three, four, five, six\") = (To_Unbounded_String (\"One\"), To_Unbounded_String (\"two\"), To_Unbounded_String (\"three\"), To_Unbounded_String (\"four\"), To_Unbounded_String (\"five\"), To_Unbounded_String (\"six\")));\n   pragma Assert (Candidate (\"Hi, my name\") = (To_Unbounded_String (\"Hi\"), To_Unbounded_String (\"my\"), To_Unbounded_String (\"name\")));\n   pragma Assert (Candidate (\"One,, two, three, four, five, six,\") = (To_Unbounded_String (\"One\"), To_Unbounded_String (\"two\"), To_Unbounded_String (\"three\"), To_Unbounded_String (\"four\"), To_Unbounded_String (\"five\"), To_Unbounded_String (\"six\")));\n   pragma Assert (Candidate (\"\") = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"ahmed     , gamal\") = (To_Unbounded_String (\"ahmed\"), To_Unbounded_String (\"gamal\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_102_choose_num", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Choose_Num (X : Integer; Y : Integer) return Integer;\n   -- This function takes two positive numbers x and y and returns the\n   -- biggest even integer number that is in the range [x, y] inclusive. If \n   -- there's no such number, then the function should return -1.\n   -- For example:\n   -- choose_num(12, 15) = 14\n   -- choose_num(13, 12) = -1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Choose_Num (X : Integer; Y : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_102_choose_num.py", "prompt_terminology": "verbatim", "tests": "\n   end Choose_Num;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer; Y : Integer) return Integer renames Placeholder.Choose_Num;\n\nbegin\n   pragma Assert (Candidate (12, 15) = 14);\n   pragma Assert (Candidate (13, 12) = -1);\n   pragma Assert (Candidate (33, 12354) = 12354);\n   pragma Assert (Candidate (5234, 5233) = -1);\n   pragma Assert (Candidate (6, 29) = 28);\n   pragma Assert (Candidate (27, 10) = -1);\n   pragma Assert (Candidate (7, 7) = -1);\n   pragma Assert (Candidate (546, 546) = 546);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_104_unique_digits", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Unique_Digits (X : Integer_Array) return Integer_Array;\n   -- Given a list of positive integers x. return a sorted list of all \n   -- elements that hasn't any even digit.\n   -- Note: Returned list should be sorted in increasing order.\n   -- For example:\n   -- >>> unique_digits([15, 33, 1422, 1])\n   -- [1, 15, 33]\n   -- >>> unique_digits([152, 323, 1422, 10])\n   -- []\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Unique_Digits (X : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_104_unique_digits.py", "prompt_terminology": "verbatim", "tests": "\n   end Unique_Digits;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer_Array) return Integer_Array renames Placeholder.Unique_Digits;\n\nbegin\n   pragma Assert (Candidate ((15, 33, 1422, 1)) = (1, 15, 33));\n   pragma Assert (Candidate ((152, 323, 1422, 10)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((12345, 2033, 111, 151)) = (111, 151));\n   pragma Assert (Candidate ((135, 103, 31)) = (31, 135));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_105_by_length", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function By_Length (Arr : Integer_Array) return Unbounded_String_Array;\n   -- Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n   -- reverse the resulting array, and then replace each digit by its corresponding name from\n   -- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n   -- For example:\n   -- arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n   -- -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n   -- -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n   -- return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n   -- If the array is empty, return an empty array:\n   -- arr = []\n   -- return []\n   -- If the array has any strange number ignore it:\n   -- arr = [1, -1 , 55] \n   -- -> sort arr -> [-1, 1, 55]\n   -- -> reverse arr -> [55, 1, -1]\n   -- return = ['One']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function By_Length (Arr : Integer_Array) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_105_by_length.py", "prompt_terminology": "verbatim", "tests": "\n   end By_Length;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Unbounded_String_Array renames Placeholder.By_Length;\n\nbegin\n   pragma Assert (Candidate ((2, 1, 1, 4, 5, 8, 2, 3)) = (To_Unbounded_String (\"Eight\"), To_Unbounded_String (\"Five\"), To_Unbounded_String (\"Four\"), To_Unbounded_String (\"Three\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"One\"), To_Unbounded_String (\"One\")));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1, -1, 55)) = (0 => To_Unbounded_String (\"One\")));\n   pragma Assert (Candidate ((1, -1, 3, 2)) = (To_Unbounded_String (\"Three\"), To_Unbounded_String (\"Two\"), To_Unbounded_String (\"One\")));\n   pragma Assert (Candidate ((9, 4, 8)) = (To_Unbounded_String (\"Nine\"), To_Unbounded_String (\"Eight\"), To_Unbounded_String (\"Four\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_106_f", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function F (N : Integer) return Integer_Array;\n   -- Implement the function f that takes n as a parameter,\n   -- and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n   -- or the sum of numbers from 1 to i otherwise.\n   -- i starts from 1.\n   -- the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n   -- Example:\n   -- f(5) == [1, 2, 6, 24, 15]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function F (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_106_f.py", "prompt_terminology": "verbatim", "tests": "\n   end F;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.F;\n\nbegin\n   pragma Assert (Candidate (5) = (1, 2, 6, 24, 15));\n   pragma Assert (Candidate (7) = (1, 2, 6, 24, 15, 720, 28));\n   pragma Assert (Candidate (1) = (0 => 1));\n   pragma Assert (Candidate (3) = (1, 2, 6));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_107_even_odd_palindrome", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n     Integer_1 : Integer;\n     Integer_2 : Integer;\n   end record;\n\n   function Even_Odd_Palindrome (N : Integer) return Integer_Integer_Tuple;\n   -- Given a positive integer n, return a tuple that has the number of even and odd\n   -- integer palindromes that fall within the range(1, n), inclusive.\n   -- Example 1:\n   -- Input: 3\n   -- Output: (1, 2)\n   -- Explanation:\n   -- Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n   -- Example 2:\n   -- Input: 12\n   -- Output: (4, 6)\n   -- Explanation:\n   -- Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n   -- Note:\n   -- 1. 1 <= n <= 10^3\n   -- 2. returned tuple has the number of even and odd integer palindromes respectively.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Even_Odd_Palindrome (N : Integer) return Integer_Integer_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "verbatim", "tests": "\n   end Even_Odd_Palindrome;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Integer_Tuple renames Placeholder.Even_Odd_Palindrome;\n\nbegin\n   pragma Assert (Candidate (123) = (8, 13));\n   pragma Assert (Candidate (12) = (4, 6));\n   pragma Assert (Candidate (3) = (1, 2));\n   pragma Assert (Candidate (63) = (6, 8));\n   pragma Assert (Candidate (25) = (5, 6));\n   pragma Assert (Candidate (19) = (4, 6));\n   pragma Assert (Candidate (9) = (4, 5));\n   pragma Assert (Candidate (1) = (0, 1));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_108_count_nums", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Count_Nums (Arr : Integer_Array) return Integer;\n   -- Write a function count_nums which takes an array of integers and returns\n   -- the number of elements which has a sum of digits > 0.\n   -- If a number is negative, then its first signed digit will be negative:\n   -- e.g. -123 has signed digits -1, 2, and 3.\n   -- >>> count_nums([]) == 0\n   -- >>> count_nums([-1, 11, -11]) == 1\n   -- >>> count_nums([1, 1, 2]) == 3\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Count_Nums (Arr : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_108_count_nums.py", "prompt_terminology": "verbatim", "tests": "\n   end Count_Nums;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Count_Nums;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = 0);\n   pragma Assert (Candidate ((-1, -2, 0)) = 0);\n   pragma Assert (Candidate ((1, 1, 2, -2, 3, 4, 5)) = 6);\n   pragma Assert (Candidate ((1, 6, 9, -6, 0, 1, 5)) = 5);\n   pragma Assert (Candidate ((1, 100, 98, -7, 1, -1)) = 4);\n   pragma Assert (Candidate ((12, 23, 34, -45, -56, 0)) = 5);\n   pragma Assert (Candidate ((0, 1)) = 1);\n   pragma Assert (Candidate ((0 => 1)) = 1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_109_move_one_ball", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Move_One_Ball (Arr : Integer_Array) return Boolean;\n   -- We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n   -- numbers in the array will be randomly ordered. Your task is to determine if\n   -- it is possible to get an array sorted in non-decreasing order by performing \n   -- the following operation on the given array:\n   -- You are allowed to perform right shift operation any number of times.\n   -- One right shift operation means shifting all elements of the array by one\n   -- position in the right direction. The last element of the array will be moved to\n   -- the starting position in the array i.e. 0th index. \n   -- If it is possible to obtain the sorted array by performing the above operation\n   -- then return True else return False.\n   -- If the given array is empty then return True.\n   -- Note: The given list is guaranteed to have unique elements.\n   -- For Example:\n   -- move_one_ball([3, 4, 5, 1, 2])==>True\n   -- Explanation: By performin 2 right shift operations, non-decreasing order can\n   -- be achieved for the given array.\n   -- move_one_ball([3, 5, 4, 1, 2])==>False\n   -- Explanation:It is not possible to get non-decreasing order for the given\n   -- array by performing any number of right shift operations.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Move_One_Ball (Arr : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_109_move_one_ball.py", "prompt_terminology": "verbatim", "tests": "\n   end Move_One_Ball;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Boolean renames Placeholder.Move_One_Ball;\n\nbegin\n   pragma Assert (Candidate ((3, 4, 5, 1, 2)) = True);\n   pragma Assert (Candidate ((3, 5, 10, 1, 2)) = True);\n   pragma Assert (Candidate ((4, 3, 1, 2)) = False);\n   pragma Assert (Candidate ((3, 5, 4, 1, 2)) = False);\n   pragma Assert (Candidate ((1 .. 0 => <>)) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_10_make_palindrome", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Make_Palindrome (My_String : String) return String;\n   -- Find the shortest palindrome that begins with a supplied string.\n   -- Algorithm idea is simple:\n   -- - Find the longest postfix of supplied string that is a palindrome.\n   -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n   -- >>> make_palindrome('')\n   -- ''\n   -- >>> make_palindrome('cat')\n   -- 'catac'\n   -- >>> make_palindrome('cata')\n   -- 'catac'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Make_Palindrome (My_String : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_10_make_palindrome.py", "prompt_terminology": "verbatim", "tests": "\n   end Make_Palindrome;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return String renames Placeholder.Make_Palindrome;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"x\") = \"x\");\n   pragma Assert (Candidate (\"xyz\") = \"xyzyx\");\n   pragma Assert (Candidate (\"xyx\") = \"xyx\");\n   pragma Assert (Candidate (\"jerry\") = \"jerryrrej\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_110_exchange", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Exchange (Lst1 : Integer_Array; Lst2 : Integer_Array) return String;\n   -- In this problem, you will implement a function that takes two lists of numbers,\n   -- and determines whether it is possible to perform an exchange of elements\n   -- between them to make lst1 a list of only even numbers.\n   -- There is no limit on the number of exchanged elements between lst1 and lst2.\n   -- If it is possible to exchange elements between the lst1 and lst2 to make\n   -- all the elements of lst1 to be even, return \"YES\".\n   -- Otherwise, return \"NO\".\n   -- For example:\n   -- exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n   -- exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n   -- It is assumed that the input lists will be non-empty.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Exchange (Lst1 : Integer_Array; Lst2 : Integer_Array) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_110_exchange.py", "prompt_terminology": "verbatim", "tests": "\n   end Exchange;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst1 : Integer_Array; Lst2 : Integer_Array) return String renames Placeholder.Exchange;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3, 4), (1, 2, 3, 4)) = \"YES\");\n   pragma Assert (Candidate ((1, 2, 3, 4), (1, 5, 3, 4)) = \"NO\");\n   pragma Assert (Candidate ((1, 2, 3, 4), (2, 1, 4, 3)) = \"YES\");\n   pragma Assert (Candidate ((5, 7, 3), (2, 6, 4)) = \"YES\");\n   pragma Assert (Candidate ((5, 7, 3), (2, 6, 3)) = \"NO\");\n   pragma Assert (Candidate ((3, 2, 6, 1, 8, 9), (3, 5, 5, 1, 1, 1)) = \"NO\");\n   pragma Assert (Candidate ((100, 200), (200, 200)) = \"YES\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_112_reverse_delete", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Boolean_Tuple is record\n     Unbounded_String_1 : Unbounded_String;\n     Boolean_2 : Boolean;\n   end record;\n\n   function Reverse_Delete (S : String; C : String) return Unbounded_String_Boolean_Tuple;\n   -- Task\n   -- We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n   -- then check if the result string is palindrome.\n   -- A string is called palindrome if it reads the same backward as forward.\n   -- You should return a tuple containing the result string and True/False for the check.\n   -- Example\n   -- For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n   -- For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n   -- For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Reverse_Delete (S : String; C : String) return Unbounded_String_Boolean_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_112_reverse_delete.py", "prompt_terminology": "verbatim", "tests": "\n   end Reverse_Delete;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String; C : String) return Unbounded_String_Boolean_Tuple renames Placeholder.Reverse_Delete;\n\nbegin\n   pragma Assert (Candidate (\"abcde\", \"ae\") = (To_Unbounded_String (\"bcd\"), False));\n   pragma Assert (Candidate (\"abcdef\", \"b\") = (To_Unbounded_String (\"acdef\"), False));\n   pragma Assert (Candidate (\"abcdedcba\", \"ab\") = (To_Unbounded_String (\"cdedc\"), True));\n   pragma Assert (Candidate (\"dwik\", \"w\") = (To_Unbounded_String (\"dik\"), False));\n   pragma Assert (Candidate (\"a\", \"a\") = (\"\", True));\n   pragma Assert (Candidate (\"abcdedcba\", \"\") = (To_Unbounded_String (\"abcdedcba\"), True));\n   pragma Assert (Candidate (\"abcdedcba\", \"v\") = (To_Unbounded_String (\"abcdedcba\"), True));\n   pragma Assert (Candidate (\"vabba\", \"v\") = (To_Unbounded_String (\"abba\"), True));\n   pragma Assert (Candidate (\"mamma\", \"mia\") = (\"\", True));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_113_odd_count", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Odd_Count (Lst : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Given a list of strings, where each string consists of only digits, return a list.\n   -- Each element i of the output should be \"the number of odd elements in the\n   -- string i of the input.\" where all the i's should be replaced by the number\n   -- of odd digits in the i'th string of the input.\n   -- >>> odd_count(['1234567'])\n   -- [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n   -- >>> odd_count(['3',\"11111111\"])\n   -- [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   -- \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Odd_Count (Lst : Unbounded_String_Array) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_113_odd_count.py", "prompt_terminology": "verbatim", "tests": "\n   end Odd_Count;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Odd_Count;\n\nbegin\n   pragma Assert (Candidate ((0 => To_Unbounded_String (\"1234567\"))) = (0 => To_Unbounded_String (\"the number of odd elements 4n the str4ng 4 of the 4nput.\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"3\"), To_Unbounded_String (\"11111111\"))) = (To_Unbounded_String (\"the number of odd elements 1n the str1ng 1 of the 1nput.\"), To_Unbounded_String (\"the number of odd elements 8n the str8ng 8 of the 8nput.\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"271\"), To_Unbounded_String (\"137\"), To_Unbounded_String (\"314\"))) = (To_Unbounded_String (\"the number of odd elements 2n the str2ng 2 of the 2nput.\"), To_Unbounded_String (\"the number of odd elements 3n the str3ng 3 of the 3nput.\"), To_Unbounded_String (\"the number of odd elements 2n the str2ng 2 of the 2nput.\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_114_minSubArraySum", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Min_Sub_Array_Sum (Nums : Integer_Array) return Integer;\n   -- Given an array of integers nums, find the minimum sum of any non-empty sub-array\n   -- of nums.\n   -- Example\n   -- minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n   -- minSubArraySum([-1, -2, -3]) == -6\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Min_Sub_Array_Sum (Nums : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py", "prompt_terminology": "verbatim", "tests": "\n   end Min_Sub_Array_Sum;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Min_Sub_Array_Sum;\n\nbegin\n   pragma Assert (Candidate ((2, 3, 4, 1, 2, 4)) = 1);\n   pragma Assert (Candidate ((-1, -2, -3)) = -6);\n   pragma Assert (Candidate ((-1, -2, -3, 2, -10)) = -14);\n   pragma Assert (Candidate ((0 => -9999999999999999)) = -9999999999999999);\n   pragma Assert (Candidate ((0, 10, 20, 1000000)) = 0);\n   pragma Assert (Candidate ((-1, -2, -3, 10, -5)) = -6);\n   pragma Assert (Candidate ((100, -1, -2, -3, 10, -5)) = -6);\n   pragma Assert (Candidate ((10, 11, 13, 8, 3, 4)) = 3);\n   pragma Assert (Candidate ((100, -33, 32, -1, 0, -2)) = -33);\n   pragma Assert (Candidate ((0 => -10)) = -10);\n   pragma Assert (Candidate ((0 => 7)) = 7);\n   pragma Assert (Candidate ((1, -1)) = -1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_116_sort_array", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Sort_Array (Arr : Integer_Array) return Integer_Array;\n   -- In this Kata, you have to sort an array of non-negative integers according to\n   -- number of ones in their binary representation in ascending order.\n   -- For similar number of ones, sort based on decimal value.\n   -- It must be implemented like this:\n   -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n   -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n   -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sort_Array (Arr : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_116_sort_array.py", "prompt_terminology": "verbatim", "tests": "\n   end Sort_Array;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer_Array renames Placeholder.Sort_Array;\n\nbegin\n   pragma Assert (Candidate ((1, 5, 2, 3, 4)) = (1, 2, 4, 3, 5));\n   pragma Assert (Candidate ((-2, -3, -4, -5, -6)) = (-4, -2, -6, -5, -3));\n   pragma Assert (Candidate ((1, 0, 2, 3, 4)) = (0, 1, 2, 4, 3));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) = (2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77));\n   pragma Assert (Candidate ((3, 6, 44, 12, 32, 5)) = (32, 3, 5, 6, 12, 44));\n   pragma Assert (Candidate ((2, 4, 8, 16, 32)) = (2, 4, 8, 16, 32));\n   pragma Assert (Candidate ((2, 4, 8, 16, 32)) = (2, 4, 8, 16, 32));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_117_select_words", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Select_Words (S : String; N : Integer) return Unbounded_String_Array;\n   -- Given a string s and a natural number n, you have been tasked to implement \n   -- a function that returns a list of all words from string s that contain exactly \n   -- n consonants, in order these words appear in the string s.\n   -- If the string s is empty then the function should return an empty list.\n   -- Note: you may assume the input string contains only letters and spaces.\n   -- Examples:\n   -- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n   -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n   -- select_words(\"simple white space\", 2) ==> []\n   -- select_words(\"Hello world\", 4) ==> [\"world\"]\n   -- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Select_Words (S : String; N : Integer) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_117_select_words.py", "prompt_terminology": "verbatim", "tests": "\n   end Select_Words;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String; N : Integer) return Unbounded_String_Array renames Placeholder.Select_Words;\n\nbegin\n   pragma Assert (Candidate (\"Mary had a little lamb\", 4) = (0 => To_Unbounded_String (\"little\")));\n   pragma Assert (Candidate (\"Mary had a little lamb\", 3) = (To_Unbounded_String (\"Mary\"), To_Unbounded_String (\"lamb\")));\n   pragma Assert (Candidate (\"simple white space\", 2) = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"Hello world\", 4) = (0 => To_Unbounded_String (\"world\")));\n   pragma Assert (Candidate (\"Uncle sam\", 3) = (0 => To_Unbounded_String (\"Uncle\")));\n   pragma Assert (Candidate (\"\", 4) = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"a b c d e f\", 1) = (To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"d\"), To_Unbounded_String (\"f\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_118_get_closest_vowel", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Get_Closest_Vowel (Word : String) return String;\n   -- You are given a word. Your task is to find the closest vowel that stands between \n   -- two consonants from the right side of the word (case sensitive).\n   -- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n   -- find any vowel met the above condition. \n   -- You may assume that the given string contains English letter only.\n   -- Example:\n   -- get_closest_vowel(\"yogurt\") ==> \"u\"\n   -- get_closest_vowel(\"FULL\") ==> \"U\"\n   -- get_closest_vowel(\"quick\") ==> \"\"\n   -- get_closest_vowel(\"ab\") ==> \"\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Get_Closest_Vowel (Word : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "verbatim", "tests": "\n   end Get_Closest_Vowel;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Word : String) return String renames Placeholder.Get_Closest_Vowel;\n\nbegin\n   pragma Assert (Candidate (\"yogurt\") = \"u\");\n   pragma Assert (Candidate (\"full\") = \"u\");\n   pragma Assert (Candidate (\"easy\") = \"\");\n   pragma Assert (Candidate (\"eAsy\") = \"\");\n   pragma Assert (Candidate (\"ali\") = \"\");\n   pragma Assert (Candidate (\"bad\") = \"a\");\n   pragma Assert (Candidate (\"most\") = \"o\");\n   pragma Assert (Candidate (\"ab\") = \"\");\n   pragma Assert (Candidate (\"ba\") = \"\");\n   pragma Assert (Candidate (\"quick\") = \"\");\n   pragma Assert (Candidate (\"anime\") = \"i\");\n   pragma Assert (Candidate (\"Asia\") = \"\");\n   pragma Assert (Candidate (\"Above\") = \"o\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_119_match_parens", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Match_Parens (Lst : Unbounded_String_Array) return String;\n   -- You are given a list of two strings, both strings consist of open\n   -- parentheses '(' or close parentheses ')' only.\n   -- Your job is to check if it is possible to concatenate the two strings in\n   -- some order, that the resulting string will be good.\n   -- A string S is considered to be good if and only if all parentheses in S\n   -- are balanced. For example: the string '(())()' is good, while the string\n   -- '())' is not.\n   -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n   -- Examples:\n   -- match_parens(['()(', ')']) == 'Yes'\n   -- match_parens([')', ')']) == 'No'\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Match_Parens (Lst : Unbounded_String_Array) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_119_match_parens.py", "prompt_terminology": "verbatim", "tests": "\n   end Match_Parens;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Unbounded_String_Array) return String renames Placeholder.Match_Parens;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"()(\"), To_Unbounded_String (\")\"))) = \"Yes\");\n   pragma Assert (Candidate ((To_Unbounded_String (\")\"), To_Unbounded_String (\")\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"(()(())\"), To_Unbounded_String (\"())())\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\")())\"), To_Unbounded_String (\"(()()(\"))) = \"Yes\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"(())))\"), To_Unbounded_String (\"(()())((\"))) = \"Yes\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"()\"), To_Unbounded_String (\"())\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"(()(\"), To_Unbounded_String (\"()))()\"))) = \"Yes\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"((((\"), To_Unbounded_String (\"((())\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\")(()\"), To_Unbounded_String (\"(()(\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\")(\"), To_Unbounded_String (\")(\"))) = \"No\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"(\"), To_Unbounded_String (\")\"))) = \"Yes\");\n   pragma Assert (Candidate ((To_Unbounded_String (\")\"), To_Unbounded_String (\"(\"))) = \"Yes\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_11_string_xor", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function String_Xor (A : String; B : String) return String;\n   -- Input are two strings a and b consisting only of 1s and 0s.\n   -- Perform binary XOR on these inputs and return result also as a string.\n   -- >>> string_xor('010', '110')\n   -- '100'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function String_Xor (A : String; B : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_11_string_xor.py", "prompt_terminology": "verbatim", "tests": "\n   end String_Xor;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : String; B : String) return String renames Placeholder.String_Xor;\n\nbegin\n   pragma Assert (Candidate (\"111000\", \"101010\") = \"010010\");\n   pragma Assert (Candidate (\"1\", \"1\") = \"0\");\n   pragma Assert (Candidate (\"0101\", \"0000\") = \"0101\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_120_maximum", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Maximum (Arr : Integer_Array; K : Integer) return Integer_Array;\n   -- Given an array arr of integers and a positive integer k, return a sorted list \n   -- of length k with the maximum k numbers in arr.\n   -- Example 1:\n   -- Input: arr = [-3, -4, 5], k = 3\n   -- Output: [-4, -3, 5]\n   -- Example 2:\n   -- Input: arr = [4, -4, 4], k = 2\n   -- Output: [4, 4]\n   -- Example 3:\n   -- Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n   -- Output: [2]\n   -- Note:\n   -- 1. The length of the array will be in the range of [1, 1000].\n   -- 2. The elements in the array will be in the range of [-1000, 1000].\n   -- 3. 0 <= k <= len(arr)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Maximum (Arr : Integer_Array; K : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_120_maximum.py", "prompt_terminology": "verbatim", "tests": "\n   end Maximum;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array; K : Integer) return Integer_Array renames Placeholder.Maximum;\n\nbegin\n   pragma Assert (Candidate ((-3, -4, 5), 3) = (-4, -3, 5));\n   pragma Assert (Candidate ((4, -4, 4), 2) = (4, 4));\n   pragma Assert (Candidate ((-3, 2, 1, 2, -1, -2, 1), 1) = (0 => 2));\n   pragma Assert (Candidate ((123, -123, 20, 0, 1, 2, -3), 3) = (2, 20, 123));\n   pragma Assert (Candidate ((-123, 20, 0, 1, 2, -3), 4) = (0, 1, 2, 20));\n   pragma Assert (Candidate ((5, 15, 0, 3, -13, -8, 0), 7) = (-13, -8, 0, 0, 3, 5, 15));\n   pragma Assert (Candidate ((-1, 0, 2, 5, 3, -10), 2) = (3, 5));\n   pragma Assert (Candidate ((1, 0, 5, -7), 1) = (0 => 5));\n   pragma Assert (Candidate ((4, -4), 2) = (-4, 4));\n   pragma Assert (Candidate ((-10, 10), 2) = (-10, 10));\n   pragma Assert (Candidate ((1, 2, 3, -23, 243, -400, 0), 0) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_121_solution", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Solution (Lst : Integer_Array) return Integer;\n   -- Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n   -- Examples\n   -- solution([5, 8, 7, 1]) ==> 12\n   -- solution([3, 3, 3, 3, 3]) ==> 9\n   -- solution([30, 13, 24, 321]) ==>0\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Solution (Lst : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_121_solution.py", "prompt_terminology": "verbatim", "tests": "\n   end Solution;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Solution;\n\nbegin\n   pragma Assert (Candidate ((5, 8, 7, 1)) = 12);\n   pragma Assert (Candidate ((3, 3, 3, 3, 3)) = 9);\n   pragma Assert (Candidate ((30, 13, 24, 321)) = 0);\n   pragma Assert (Candidate ((5, 9)) = 5);\n   pragma Assert (Candidate ((2, 4, 8)) = 0);\n   pragma Assert (Candidate ((30, 13, 23, 32)) = 23);\n   pragma Assert (Candidate ((3, 13, 2, 9)) = 3);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_122_add_elements", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Add_Elements (Arr : Integer_Array; K : Integer) return Integer;\n   -- Given a non-empty array of integers arr and an integer k, return\n   -- the sum of the elements with at most two digits from the first k elements of arr.\n   -- Example:\n   -- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n   -- Output: 24 # sum of 21 + 3\n   -- Constraints:\n   -- 1. 1 <= len(arr) <= 100\n   -- 2. 1 <= k <= len(arr)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Add_Elements (Arr : Integer_Array; K : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_122_add_elements.py", "prompt_terminology": "verbatim", "tests": "\n   end Add_Elements;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array; K : Integer) return Integer renames Placeholder.Add_Elements;\n\nbegin\n   pragma Assert (Candidate ((1, -2, -3, 41, 57, 76, 87, 88, 99), 3) = -4);\n   pragma Assert (Candidate ((111, 121, 3, 4000, 5, 6), 2) = 0);\n   pragma Assert (Candidate ((11, 21, 3, 90, 5, 6, 7, 8, 9), 4) = 125);\n   pragma Assert (Candidate ((111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) = 24);\n   pragma Assert (Candidate ((0 => 1), 1) = 1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_123_get_odd_collatz", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Get_Odd_Collatz (N : Integer) return Integer_Array;\n   -- Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n   -- The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n   -- as follows: start with any positive integer n. Then each term is obtained from the \n   -- previous term as follows: if the previous term is even, the next term is one half of \n   -- the previous term. If the previous term is odd, the next term is 3 times the previous\n   -- term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n   -- Note: \n   -- 1. Collatz(1) is [1].\n   -- 2. returned list sorted in increasing order.\n   -- For example:\n   -- get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Get_Odd_Collatz (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "verbatim", "tests": "\n   end Get_Odd_Collatz;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Get_Odd_Collatz;\n\nbegin\n   pragma Assert (Candidate (14) = (1, 5, 7, 11, 13, 17));\n   pragma Assert (Candidate (5) = (1, 5));\n   pragma Assert (Candidate (12) = (1, 3, 5));\n   pragma Assert (Candidate (1) = (0 => 1));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_124_valid_date", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Valid_Date (Date : String) return Boolean;\n   -- You have to write a function which validates a given date string and\n   -- returns True if the date is valid otherwise False.\n   -- The date is valid if all of the following rules are satisfied:\n   -- 1. The date string is not empty.\n   -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n   -- 3. The months should not be less than 1 or higher than 12.\n   -- 4. The date should be in the format: mm-dd-yyyy\n   -- for example: \n   -- valid_date('03-11-2000') => True\n   -- valid_date('15-01-2012') => False\n   -- valid_date('04-0-2040') => False\n   -- valid_date('06-04-2020') => True\n   -- valid_date('06/04/2020') => False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Valid_Date (Date : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_124_valid_date.py", "prompt_terminology": "verbatim", "tests": "\n   end Valid_Date;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Date : String) return Boolean renames Placeholder.Valid_Date;\n\nbegin\n   pragma Assert (Candidate (\"03-11-2000\") = True);\n   pragma Assert (Candidate (\"15-01-2012\") = False);\n   pragma Assert (Candidate (\"04-0-2040\") = False);\n   pragma Assert (Candidate (\"06-04-2020\") = True);\n   pragma Assert (Candidate (\"01-01-2007\") = True);\n   pragma Assert (Candidate (\"03-32-2011\") = False);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"04-31-3000\") = False);\n   pragma Assert (Candidate (\"06-06-2005\") = True);\n   pragma Assert (Candidate (\"21-31-2000\") = False);\n   pragma Assert (Candidate (\"04-12-2003\") = True);\n   pragma Assert (Candidate (\"04122003\") = False);\n   pragma Assert (Candidate (\"20030412\") = False);\n   pragma Assert (Candidate (\"2003-04\") = False);\n   pragma Assert (Candidate (\"2003-04-12\") = False);\n   pragma Assert (Candidate (\"04-2003\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_126_is_sorted", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Is_Sorted (Lst : Integer_Array) return Boolean;\n   -- Given a list of numbers, return whether or not they are sorted\n   -- in ascending order. If list has more than 1 duplicate of the same\n   -- number, return False. Assume no negative numbers and only integers.\n   -- Examples\n   -- is_sorted([5]) \u279e True\n   -- is_sorted([1, 2, 3, 4, 5]) \u279e True\n   -- is_sorted([1, 3, 2, 4, 5]) \u279e False\n   -- is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n   -- is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n   -- is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n   -- is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n   -- is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Sorted (Lst : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_126_is_sorted.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Sorted;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Boolean renames Placeholder.Is_Sorted;\n\nbegin\n   pragma Assert (Candidate ((0 => 5)) = True);\n   pragma Assert (Candidate ((1, 2, 3, 4, 5)) = True);\n   pragma Assert (Candidate ((1, 3, 2, 4, 5)) = False);\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 6)) = True);\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 6, 7)) = True);\n   pragma Assert (Candidate ((1, 3, 2, 4, 5, 6, 7)) = False);\n   pragma Assert (Candidate ((1 .. 0 => <>)) = True);\n   pragma Assert (Candidate ((0 => 1)) = True);\n   pragma Assert (Candidate ((3, 2, 1)) = False);\n   pragma Assert (Candidate ((1, 2, 2, 2, 3, 4)) = False);\n   pragma Assert (Candidate ((1, 2, 3, 3, 3, 4)) = False);\n   pragma Assert (Candidate ((1, 2, 2, 3, 3, 4)) = True);\n   pragma Assert (Candidate ((1, 2, 3, 4)) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_127_intersection", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n     Integer_1 : Integer;\n     Integer_2 : Integer;\n   end record;\n\n   function Intersection (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String;\n   -- You are given two intervals,\n   -- where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n   -- The given intervals are closed which means that the interval (start, end)\n   -- includes both start and end.\n   -- For each given interval, it is assumed that its start is less or equal its end.\n   -- Your task is to determine whether the length of intersection of these two \n   -- intervals is a prime number.\n   -- Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n   -- which its length is 1, which not a prime number.\n   -- If the length of the intersection is a prime number, return \"YES\",\n   -- otherwise, return \"NO\".\n   -- If the two intervals don't intersect, return \"NO\".\n   -- [input/output] samples:\n   -- intersection((1, 2), (2, 3)) ==> \"NO\"\n   -- intersection((-1, 1), (0, 4)) ==> \"NO\"\n   -- intersection((-3, -1), (-5, 5)) ==> \"YES\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Intersection (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_127_intersection.py", "prompt_terminology": "verbatim", "tests": "\n   end Intersection;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Interval1 : Integer_Integer_Tuple; Interval2 : Integer_Integer_Tuple) return String renames Placeholder.Intersection;\n\nbegin\n   pragma Assert (Candidate ((1, 2), (2, 3)) = \"NO\");\n   pragma Assert (Candidate ((-1, 1), (0, 4)) = \"NO\");\n   pragma Assert (Candidate ((-3, -1), (-5, 5)) = \"YES\");\n   pragma Assert (Candidate ((-2, 2), (-4, 0)) = \"YES\");\n   pragma Assert (Candidate ((-11, 2), (-1, -1)) = \"NO\");\n   pragma Assert (Candidate ((1, 2), (3, 5)) = \"NO\");\n   pragma Assert (Candidate ((1, 2), (1, 2)) = \"NO\");\n   pragma Assert (Candidate ((-2, -2), (-3, -2)) = \"NO\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_128_prod_signs", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   function Prod_Signs (Arr : Integer_Array) return Integer_Option;\n   -- You are given an array arr of integers and you need to return\n   -- sum of magnitudes of integers multiplied by product of all signs\n   -- of each number in the array, represented by 1, -1 or 0.\n   -- Note: return None for empty arr.\n   -- Example:\n   -- >>> prod_signs([1, 2, 2, -4]) == -9\n   -- >>> prod_signs([0, 1]) == 0\n   -- >>> prod_signs([]) == None\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Prod_Signs (Arr : Integer_Array) return Integer_Option", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_128_prod_signs.py", "prompt_terminology": "verbatim", "tests": "\n   end Prod_Signs;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer_Option renames Placeholder.Prod_Signs;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 2, -4)) = (Valid => True, Value => -9));\n   pragma Assert (Candidate ((0, 1)) = (Valid => True, Value => 0));\n   pragma Assert (Candidate ((1, 1, 1, 2, 3, -1, 1)) = (Valid => True, Value => -10));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (Valid => False));\n   pragma Assert (Candidate ((2, 4, 1, 2, -1, -1, 9)) = (Valid => True, Value => 20));\n   pragma Assert (Candidate ((-1, 1, -1, 1)) = (Valid => True, Value => 4));\n   pragma Assert (Candidate ((-1, 1, 1, 1)) = (Valid => True, Value => -4));\n   pragma Assert (Candidate ((-1, 1, 1, 0)) = (Valid => True, Value => 0));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_12_longest", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function Longest (Strings : Unbounded_String_Array) return Unbounded_String_Option;\n   -- Out of list of strings, return the longest one. Return the first one in case of multiple\n   -- strings of the same length. Return None in case the input list is empty.\n   -- >>> longest([])\n   -- >>> longest(['a', 'b', 'c'])\n   -- 'a'\n   -- >>> longest(['a', 'bb', 'ccc'])\n   -- 'ccc'\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Longest (Strings : Unbounded_String_Array) return Unbounded_String_Option", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_12_longest.py", "prompt_terminology": "verbatim", "tests": "\n   end Longest;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Strings : Unbounded_String_Array) return Unbounded_String_Option renames Placeholder.Longest;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (Valid => False));\n   pragma Assert (Candidate ((To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\"))) = (Valid => True, Value => \"eA==\"));\n   pragma Assert (Candidate ((To_Unbounded_String (\"x\"), To_Unbounded_String (\"yyy\"), To_Unbounded_String (\"zzzz\"), To_Unbounded_String (\"www\"), To_Unbounded_String (\"kkkk\"), To_Unbounded_String (\"abc\"))) = (Valid => True, Value => \"enp6eg==\"));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_130_tri", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Tri (N : Integer) return Integer_Array;\n   -- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n   -- the last couple centuries. However, what people don't know is Tribonacci sequence.\n   -- Tribonacci sequence is defined by the recurrence:\n   -- tri(1) = 3\n   -- tri(n) = 1 + n / 2, if n is even.\n   -- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n   -- For example:\n   -- tri(2) = 1 + (2 / 2) = 2\n   -- tri(4) = 3\n   -- tri(3) = tri(2) + tri(1) + tri(4)\n   -- = 2 + 3 + 3 = 8 \n   -- You are given a non-negative integer number n, you have to a return a list of the \n   -- first n + 1 numbers of the Tribonacci sequence.\n   -- Examples:\n   -- tri(3) = [1, 3, 2, 8]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Tri (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_130_tri.py", "prompt_terminology": "verbatim", "tests": "\n   end Tri;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Tri;\n\nbegin\n   pragma Assert (Candidate (3) = (1, 3, 2, 8));\n   pragma Assert (Candidate (4) = (1, 3, 2, 8, 3));\n   pragma Assert (Candidate (5) = (1, 3, 2, 8, 3, 15));\n   pragma Assert (Candidate (6) = (1, 3, 2, 8, 3, 15, 4));\n   pragma Assert (Candidate (7) = (1, 3, 2, 8, 3, 15, 4, 24));\n   pragma Assert (Candidate (8) = (1, 3, 2, 8, 3, 15, 4, 24, 5));\n   pragma Assert (Candidate (9) = (1, 3, 2, 8, 3, 15, 4, 24, 5, 35));\n   pragma Assert (Candidate (20) = (1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11));\n   pragma Assert (Candidate (0) = (0 => 1));\n   pragma Assert (Candidate (1) = (1, 3));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_131_digits", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Digits (N : Integer) return Integer;\n   -- Given a positive integer n, return the product of the odd digits.\n   -- Return 0 if all digits are even.\n   -- For example:\n   -- digits(1)  == 1\n   -- digits(4)  == 0\n   -- digits(235) == 15\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Digits (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_131_digits.py", "prompt_terminology": "verbatim", "tests": "\n   end Digits;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Digits;\n\nbegin\n   pragma Assert (Candidate (5) = 5);\n   pragma Assert (Candidate (54) = 5);\n   pragma Assert (Candidate (120) = 1);\n   pragma Assert (Candidate (5014) = 5);\n   pragma Assert (Candidate (98765) = 315);\n   pragma Assert (Candidate (5576543) = 2625);\n   pragma Assert (Candidate (2468) = 0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_132_is_nested", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Nested (My_String : String) return Boolean;\n   -- Create a function that takes a string as input which contains only square brackets.\n   -- The function should return True if and only if there is a valid subsequence of brackets \n   -- where at least one bracket in the subsequence is nested.\n   -- is_nested('[[]]') \u279e True\n   -- is_nested('[]]]]]]][[[[[]') \u279e False\n   -- is_nested('[][]') \u279e False\n   -- is_nested('[]') \u279e False\n   -- is_nested('[[][]]') \u279e True\n   -- is_nested('[[]][[') \u279e True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Nested (My_String : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_132_is_nested.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Nested;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return Boolean renames Placeholder.Is_Nested;\n\nbegin\n   pragma Assert (Candidate (\"[[]]\") = True);\n   pragma Assert (Candidate (\"[]]]]]]][[[[[]\") = False);\n   pragma Assert (Candidate (\"[][]\") = False);\n   pragma Assert (Candidate (\"[]\") = False);\n   pragma Assert (Candidate (\"[[[[]]]]\") = True);\n   pragma Assert (Candidate (\"[]]]]]]]]]]\") = False);\n   pragma Assert (Candidate (\"[][][[]]\") = True);\n   pragma Assert (Candidate (\"[[]\") = False);\n   pragma Assert (Candidate (\"[]]\") = False);\n   pragma Assert (Candidate (\"[[]][[\") = True);\n   pragma Assert (Candidate (\"[[][]]\") = True);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"[[[[[[[[\") = False);\n   pragma Assert (Candidate (\"]]]]]]]]\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_133_sum_squares", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   function Sum_Squares (Lst : Float_Array) return Integer;\n   -- You are given a list of numbers.\n   -- You need to return the sum of squared numbers in the given list,\n   -- round each element in the list to the upper int(Ceiling) first.\n   -- Examples:\n   -- For lst = [1,2,3] the output should be 14\n   -- For lst = [1,4,9] the output should be 98\n   -- For lst = [1,3,5,7] the output should be 84\n   -- For lst = [1.4,4.2,0] the output should be 29\n   -- For lst = [-2.4,1,1] the output should be 6\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sum_Squares (Lst : Float_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_133_sum_squares.py", "prompt_terminology": "verbatim", "tests": "\n   end Sum_Squares;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Float_Array) return Integer renames Placeholder.Sum_Squares;\n\nbegin\n   pragma Assert (Candidate ((1.0, 2.0, 3.0)) = 14);\n   pragma Assert (Candidate ((1.0, 2.0, 3.0)) = 14);\n   pragma Assert (Candidate ((1.0, 3.0, 5.0, 7.0)) = 84);\n   pragma Assert (Candidate ((1.4, 4.2, 0.0)) = 29);\n   pragma Assert (Candidate ((-2.4, 1.0, 1.0)) = 6);\n   pragma Assert (Candidate ((100.0, 1.0, 15.0, 2.0)) = 10230);\n   pragma Assert (Candidate ((10000.0, 10000.0)) = 200000000);\n   pragma Assert (Candidate ((-1.4, 4.6, 6.3)) = 75);\n   pragma Assert (Candidate ((-1.4, 17.9, 18.9, 19.9)) = 1086);\n   pragma Assert (Candidate ((0 => 0.0)) = 0);\n   pragma Assert (Candidate ((0 => -1.0)) = 1);\n   pragma Assert (Candidate ((-1.0, 1.0, 0.0)) = 2);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Check_If_Last_Char_Is_A_Letter (Txt : String) return Boolean;\n   -- Create a function that returns True if the last character\n   -- of a given string is an alphabetical character and is not\n   -- a part of a word, and False otherwise.\n   -- Note: \"word\" is a group of characters separated by space.\n   -- Examples:\n   -- check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n   -- check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n   -- check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n   -- check_if_last_char_is_a_letter(\"\") \u279e False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Check_If_Last_Char_Is_A_Letter (Txt : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "verbatim", "tests": "\n   end Check_If_Last_Char_Is_A_Letter;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Txt : String) return Boolean renames Placeholder.Check_If_Last_Char_Is_A_Letter;\n\nbegin\n   pragma Assert (Candidate (\"apple\") = False);\n   pragma Assert (Candidate (\"apple pi e\") = True);\n   pragma Assert (Candidate (\"eeeee\") = False);\n   pragma Assert (Candidate (\"A\") = True);\n   pragma Assert (Candidate (\"Pumpkin pie \") = False);\n   pragma Assert (Candidate (\"Pumpkin pie 1\") = False);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"eeeee e \") = False);\n   pragma Assert (Candidate (\"apple pie\") = False);\n   pragma Assert (Candidate (\"apple pi e \") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_135_can_arrange", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Can_Arrange (Arr : Integer_Array) return Integer;\n   -- Create a function which returns the largest index of an element which\n   -- is not greater than or equal to the element immediately preceding it. If\n   -- no such element exists then return -1. The given array will not contain\n   -- duplicate values.\n   -- Examples:\n   -- can_arrange([1,2,4,3,5]) = 3\n   -- can_arrange([1,2,3]) = -1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Can_Arrange (Arr : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_135_can_arrange.py", "prompt_terminology": "verbatim", "tests": "\n   end Can_Arrange;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Can_Arrange;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 4, 3, 5)) = 3);\n   pragma Assert (Candidate ((1, 2, 4, 5)) = -1);\n   pragma Assert (Candidate ((1, 4, 2, 5, 6, 7, 8, 9, 10)) = 2);\n   pragma Assert (Candidate ((4, 8, 5, 7, 3)) = 4);\n   pragma Assert (Candidate ((1 .. 0 => <>)) = -1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_136_largest_smallest_integers", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   type Integer_Option_Integer_Option_Tuple is record\n     Integer_Option_1 : Integer_Option;\n     Integer_Option_2 : Integer_Option;\n   end record;\n\n   function Largest_Smallest_Integers (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple;\n   -- Create a function that returns a tuple (a, b), where 'a' is\n   -- the largest of negative integers, and 'b' is the smallest\n   -- of positive integers in a list.\n   -- If there is no negative or positive integers, return them as None.\n   -- Examples:\n   -- largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n   -- largest_smallest_integers([]) == (None, None)\n   -- largest_smallest_integers([0]) == (None, None)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Largest_Smallest_Integers (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "verbatim", "tests": "\n   end Largest_Smallest_Integers;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer_Option_Integer_Option_Tuple renames Placeholder.Largest_Smallest_Integers;\n\nbegin\n   pragma Assert (Candidate ((2, 4, 1, 3, 5, 7)) = ((Valid => False), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ((2, 4, 1, 3, 5, 7, 0)) = ((Valid => False), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ((1, 3, 2, 4, 5, 6, -2)) = ((Valid => True, Value => -2), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ((4, 5, 3, 6, 2, 7, -7)) = ((Valid => True, Value => -7), (Valid => True, Value => 2)));\n   pragma Assert (Candidate ((7, 3, 8, 4, 9, 2, 5, -9)) = ((Valid => True, Value => -9), (Valid => True, Value => 2)));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = ((Valid => False), (Valid => False)));\n   pragma Assert (Candidate ((0 => 0)) = ((Valid => False), (Valid => False)));\n   pragma Assert (Candidate ((-1, -3, -5, -6)) = ((Valid => True, Value => -1), (Valid => False)));\n   pragma Assert (Candidate ((-1, -3, -5, -6, 0)) = ((Valid => True, Value => -1), (Valid => False)));\n   pragma Assert (Candidate ((-6, -4, -4, -3, 1)) = ((Valid => True, Value => -3), (Valid => True, Value => 1)));\n   pragma Assert (Candidate ((-6, -4, -4, -3, -100, 1)) = ((Valid => True, Value => -3), (Valid => True, Value => 1)));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Equal_To_Sum_Even (N : Integer) return Boolean;\n   -- Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n   -- Example\n   -- is_equal_to_sum_even(4) == False\n   -- is_equal_to_sum_even(6) == False\n   -- is_equal_to_sum_even(8) == True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Equal_To_Sum_Even (N : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Equal_To_Sum_Even;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Equal_To_Sum_Even;\n\nbegin\n   pragma Assert (Candidate (4) = False);\n   pragma Assert (Candidate (6) = False);\n   pragma Assert (Candidate (8) = True);\n   pragma Assert (Candidate (10) = True);\n   pragma Assert (Candidate (11) = False);\n   pragma Assert (Candidate (12) = True);\n   pragma Assert (Candidate (13) = False);\n   pragma Assert (Candidate (16) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_139_special_factorial", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Special_Factorial (N : Integer) return Integer;\n   -- The Brazilian factorial is defined as:\n   -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n   -- where n > 0\n   -- For example:\n   -- >>> special_factorial(4)\n   -- 288\n   -- The function will receive an integer as input and should return the special\n   -- factorial of this integer.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Special_Factorial (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_139_special_factorial.py", "prompt_terminology": "verbatim", "tests": "\n   end Special_Factorial;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Special_Factorial;\n\nbegin\n   pragma Assert (Candidate (4) = 288);\n   pragma Assert (Candidate (5) = 34560);\n   pragma Assert (Candidate (7) = 125411328000);\n   pragma Assert (Candidate (1) = 1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_13_greatest_common_divisor", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Greatest_Common_Divisor (A : Integer; B : Integer) return Integer;\n   -- Return a greatest common divisor of two integers a and b\n   -- >>> greatest_common_divisor(3, 5)\n   -- 1\n   -- >>> greatest_common_divisor(25, 15)\n   -- 5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Greatest_Common_Divisor (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "verbatim", "tests": "\n   end Greatest_Common_Divisor;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Greatest_Common_Divisor;\n\nbegin\n   pragma Assert (Candidate (3, 7) = 1);\n   pragma Assert (Candidate (10, 15) = 5);\n   pragma Assert (Candidate (49, 14) = 7);\n   pragma Assert (Candidate (144, 60) = 12);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_140_fix_spaces", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fix_Spaces (Text : String) return String;\n   -- Given a string text, replace all spaces in it with underscores, \n   -- and if a string has more than 2 consecutive spaces, \n   -- then replace all consecutive spaces with - \n   -- fix_spaces(\"Example\") == \"Example\"\n   -- fix_spaces(\"Example 1\") == \"Example_1\"\n   -- fix_spaces(\" Example 2\") == \"_Example_2\"\n   -- fix_spaces(\" Example   3\") == \"_Example-3\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fix_Spaces (Text : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_140_fix_spaces.py", "prompt_terminology": "verbatim", "tests": "\n   end Fix_Spaces;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Text : String) return String renames Placeholder.Fix_Spaces;\n\nbegin\n   pragma Assert (Candidate (\"Example\") = \"Example\");\n   pragma Assert (Candidate (\"Mudasir Hanif \") = \"Mudasir_Hanif_\");\n   pragma Assert (Candidate (\"Yellow Yellow  Dirty  Fellow\") = \"Yellow_Yellow__Dirty__Fellow\");\n   pragma Assert (Candidate (\"Exa   mple\") = \"Exa-mple\");\n   pragma Assert (Candidate (\"   Exa 1 2 2 mple\") = \"-Exa_1_2_2_mple\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_141_file_name_check", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function File_Name_Check (File_Name : String) return String;\n   -- Create a function which takes a string representing a file's name, and returns\n   -- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   -- A file's name is considered to be valid if and only if all the following conditions \n   -- are met:\n   -- - There should not be more than three digits ('0'-'9') in the file's name.\n   -- - The file's name contains exactly one dot '.'\n   -- - The substring before the dot should not be empty, and it starts with a letter from \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n   -- Examples:\n   -- file_name_check(\"example.txt\") # => 'Yes'\n   -- file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function File_Name_Check (File_Name : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_141_file_name_check.py", "prompt_terminology": "verbatim", "tests": "\n   end File_Name_Check;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (File_Name : String) return String renames Placeholder.File_Name_Check;\n\nbegin\n   pragma Assert (Candidate (\"example.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"1example.dll\") = \"No\");\n   pragma Assert (Candidate (\"s1sdf3.asd\") = \"No\");\n   pragma Assert (Candidate (\"K.dll\") = \"Yes\");\n   pragma Assert (Candidate (\"MY16FILE3.exe\") = \"Yes\");\n   pragma Assert (Candidate (\"His12FILE94.exe\") = \"No\");\n   pragma Assert (Candidate (\"_Y.txt\") = \"No\");\n   pragma Assert (Candidate (\"?aREYA.exe\") = \"No\");\n   pragma Assert (Candidate (\"/this_is_valid.dll\") = \"No\");\n   pragma Assert (Candidate (\"this_is_valid.wow\") = \"No\");\n   pragma Assert (Candidate (\"this_is_valid.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"this_is_valid.txtexe\") = \"No\");\n   pragma Assert (Candidate (\"#this2_i4s_5valid.ten\") = \"No\");\n   pragma Assert (Candidate (\"@this1_is6_valid.exe\") = \"No\");\n   pragma Assert (Candidate (\"this_is_12valid.6exe4.txt\") = \"No\");\n   pragma Assert (Candidate (\"all.exe.txt\") = \"No\");\n   pragma Assert (Candidate (\"I563_No.exe\") = \"Yes\");\n   pragma Assert (Candidate (\"Is3youfault.txt\") = \"Yes\");\n   pragma Assert (Candidate (\"no_one#knows.dll\") = \"Yes\");\n   pragma Assert (Candidate (\"1I563_Yes3.exe\") = \"No\");\n   pragma Assert (Candidate (\"I563_Yes3.txtt\") = \"No\");\n   pragma Assert (Candidate (\"final..txt\") = \"No\");\n   pragma Assert (Candidate (\"final132\") = \"No\");\n   pragma Assert (Candidate (\"_f4indsartal132.\") = \"No\");\n   pragma Assert (Candidate (\".txt\") = \"No\");\n   pragma Assert (Candidate (\"s.\") = \"No\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_142_sum_squares", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Sum_Squares (Lst : Integer_Array) return Integer;\n   -- \"\n   -- This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n   -- multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n   -- change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n   -- Examples:\n   -- For lst = [1,2,3] the output should be 6\n   -- For lst = []  the output should be 0\n   -- For lst = [-1,-5,2,-1,-5]  the output should be -126\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sum_Squares (Lst : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_142_sum_squares.py", "prompt_terminology": "verbatim", "tests": "\n   end Sum_Squares;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Sum_Squares;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3)) = 6);\n   pragma Assert (Candidate ((1, 4, 9)) = 14);\n   pragma Assert (Candidate ((1 .. 0 => <>)) = 0);\n   pragma Assert (Candidate ((1, 1, 1, 1, 1, 1, 1, 1, 1)) = 9);\n   pragma Assert (Candidate ((-1, -1, -1, -1, -1, -1, -1, -1, -1)) = -3);\n   pragma Assert (Candidate ((0 => 0)) = 0);\n   pragma Assert (Candidate ((-1, -5, 2, -1, -5)) = -126);\n   pragma Assert (Candidate ((-56, -99, 1, 0, -2)) = 3030);\n   pragma Assert (Candidate ((-1, 0, 0, 0, 0, 0, 0, 0, -1)) = 0);\n   pragma Assert (Candidate ((-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) = -14196);\n   pragma Assert (Candidate ((-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) = -1448);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_143_words_in_sentence", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Words_In_Sentence (Sentence : String) return String;\n   -- You are given a string representing a sentence,\n   -- the sentence contains some words separated by a space,\n   -- and you have to return a string that contains the words from the original sentence,\n   -- whose lengths are prime numbers,\n   -- the order of the words in the new string should be the same as the original one.\n   -- Example 1:\n   -- Input: sentence = \"This is a test\"\n   -- Output: \"is\"\n   -- Example 2:\n   -- Input: sentence = \"lets go for swimming\"\n   -- Output: \"go for\"\n   -- Constraints:\n   -- * 1 <= len(sentence) <= 100\n   -- * sentence contains only letters\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Words_In_Sentence (Sentence : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py", "prompt_terminology": "verbatim", "tests": "\n   end Words_In_Sentence;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Sentence : String) return String renames Placeholder.Words_In_Sentence;\n\nbegin\n   pragma Assert (Candidate (\"This is a test\") = \"is\");\n   pragma Assert (Candidate (\"lets go for swimming\") = \"go for\");\n   pragma Assert (Candidate (\"there is no place available here\") = \"there is no place\");\n   pragma Assert (Candidate (\"Hi I am Hussein\") = \"Hi am Hussein\");\n   pragma Assert (Candidate (\"go for it\") = \"go for it\");\n   pragma Assert (Candidate (\"here\") = \"\");\n   pragma Assert (Candidate (\"here is\") = \"is\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_144_simplify", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Simplify (X : String; N : String) return Boolean;\n   -- Your task is to implement a function that will simplify the expression\n   -- x * n. The function returns True if x * n evaluates to a whole number and False\n   -- otherwise. Both x and n, are string representation of a fraction, and have the following format,\n   -- <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n   -- You can assume that x, and n are valid fractions, and do not have zero as denominator.\n   -- simplify(\"1/5\", \"5/1\") = True\n   -- simplify(\"1/6\", \"2/1\") = False\n   -- simplify(\"7/10\", \"10/2\") = False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Simplify (X : String; N : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_144_simplify.py", "prompt_terminology": "verbatim", "tests": "\n   end Simplify;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : String; N : String) return Boolean renames Placeholder.Simplify;\n\nbegin\n   pragma Assert (Candidate (\"1/5\", \"5/1\") = True);\n   pragma Assert (Candidate (\"1/6\", \"2/1\") = False);\n   pragma Assert (Candidate (\"5/1\", \"3/1\") = True);\n   pragma Assert (Candidate (\"7/10\", \"10/2\") = False);\n   pragma Assert (Candidate (\"2/10\", \"50/10\") = True);\n   pragma Assert (Candidate (\"7/2\", \"4/2\") = True);\n   pragma Assert (Candidate (\"11/6\", \"6/1\") = True);\n   pragma Assert (Candidate (\"2/3\", \"5/2\") = False);\n   pragma Assert (Candidate (\"5/2\", \"3/5\") = False);\n   pragma Assert (Candidate (\"2/4\", \"8/4\") = True);\n   pragma Assert (Candidate (\"2/4\", \"4/2\") = True);\n   pragma Assert (Candidate (\"1/5\", \"5/1\") = True);\n   pragma Assert (Candidate (\"1/5\", \"1/5\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_145_order_by_points", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Order_By_Points (Nums : Integer_Array) return Integer_Array;\n   -- Write a function which sorts the given list of integers\n   -- in ascending order according to the sum of their digits.\n   -- Note: if there are several items with similar sum of their digits,\n   -- order them based on their index in original list.\n   -- For example:\n   -- >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   -- >>> order_by_points([]) == []\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Order_By_Points (Nums : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_145_order_by_points.py", "prompt_terminology": "verbatim", "tests": "\n   end Order_By_Points;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Nums : Integer_Array) return Integer_Array renames Placeholder.Order_By_Points;\n\nbegin\n   pragma Assert (Candidate ((1, 11, -1, -11, -12)) = (-1, -11, 1, -12, 11));\n   pragma Assert (Candidate ((1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) = (0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1, -11, -32, 43, 54, -98, 2, -3)) = (-3, -32, -98, -11, 1, 2, 43, 54));\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) = (1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9));\n   pragma Assert (Candidate ((0, 6, 6, -76, -21, 23, 4)) = (-76, -21, 0, 4, 23, 6, 6));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_146_specialFilter", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Special_Filter (Nums : Integer_Array) return Integer;\n   -- Write a function that takes an array of numbers as input and returns \n   -- the number of elements in the array that are greater than 10 and both \n   -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n   -- For example:\n   -- specialFilter([15, -73, 14, -15]) => 1 \n   -- specialFilter([33, -2, -3, 45, 21, 109]) => 2\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Special_Filter (Nums : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_146_specialFilter.py", "prompt_terminology": "verbatim", "tests": "\n   end Special_Filter;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Nums : Integer_Array) return Integer renames Placeholder.Special_Filter;\n\nbegin\n   pragma Assert (Candidate ((5, -2, 1, -5)) = 0);\n   pragma Assert (Candidate ((15, -73, 14, -15)) = 1);\n   pragma Assert (Candidate ((33, -2, -3, 45, 21, 109)) = 2);\n   pragma Assert (Candidate ((43, -12, 93, 125, 121, 109)) = 4);\n   pragma Assert (Candidate ((71, -2, -33, 75, 21, 19)) = 3);\n   pragma Assert (Candidate ((0 => 1)) = 0);\n   pragma Assert (Candidate ((1 .. 0 => <>)) = 0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_147_get_max_triples", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Get_Max_Triples (N : Integer) return Integer;\n   -- You are given a positive integer n. You have to create an integer array a of length n.\n   -- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n   -- Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n   -- and a[i] + a[j] + a[k] is a multiple of 3.\n   -- Example :\n   -- Input: n = 5\n   -- Output: 1\n   -- Explanation: \n   -- a = [1, 3, 7, 13, 21]\n   -- The only valid triple is (1, 7, 13).\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Get_Max_Triples (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_147_get_max_triples.py", "prompt_terminology": "verbatim", "tests": "\n   end Get_Max_Triples;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Get_Max_Triples;\n\nbegin\n   pragma Assert (Candidate (5) = 1);\n   pragma Assert (Candidate (6) = 4);\n   pragma Assert (Candidate (10) = 36);\n   pragma Assert (Candidate (100) = 53361);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_148_bf", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Bf (Planet1 : String; Planet2 : String) return Unbounded_String_Array;\n   -- There are eight planets in our solar system: the closerst to the Sun \n   -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   -- Uranus, Neptune.\n   -- Write a function that takes two planet names as strings planet1 and planet2. \n   -- The function should return a tuple containing all planets whose orbits are \n   -- located between the orbit of planet1 and the orbit of planet2, sorted by \n   -- the proximity to the sun. \n   -- The function should return an empty tuple if planet1 or planet2\n   -- are not correct planet names. \n   -- Examples\n   -- bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n   -- bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n   -- bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Bf (Planet1 : String; Planet2 : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_148_bf.py", "prompt_terminology": "verbatim", "tests": "\n   end Bf;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Planet1 : String; Planet2 : String) return Unbounded_String_Array renames Placeholder.Bf;\n\nbegin\n   pragma Assert (Candidate (\"Jupiter\", \"Neptune\") = (To_Unbounded_String (\"Saturn\"), To_Unbounded_String (\"Uranus\")));\n   pragma Assert (Candidate (\"Earth\", \"Mercury\") = (0 => To_Unbounded_String (\"Venus\")));\n   pragma Assert (Candidate (\"Mercury\", \"Uranus\") = (To_Unbounded_String (\"Venus\"), To_Unbounded_String (\"Earth\"), To_Unbounded_String (\"Mars\"), To_Unbounded_String (\"Jupiter\"), To_Unbounded_String (\"Saturn\")));\n   pragma Assert (Candidate (\"Neptune\", \"Venus\") = (To_Unbounded_String (\"Earth\"), To_Unbounded_String (\"Mars\"), To_Unbounded_String (\"Jupiter\"), To_Unbounded_String (\"Saturn\"), To_Unbounded_String (\"Uranus\")));\n   pragma Assert (Candidate (\"Earth\", \"Earth\") = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"Mars\", \"Earth\") = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"Jupiter\", \"Makemake\") = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_149_sorted_list_sum", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Sorted_List_Sum (Lst : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Write a function that accepts a list of strings as a parameter,\n   -- deletes the strings that have odd lengths from it,\n   -- and returns the resulted list with a sorted order,\n   -- The list is always a list of strings and never an array of numbers,\n   -- and it may contain duplicates.\n   -- The order of the list should be ascending by length of each word, and you\n   -- should return the list sorted by that rule.\n   -- If two words have the same length, sort the list alphabetically.\n   -- The function should return a list of strings in sorted order.\n   -- You may assume that all words will have the same length.\n   -- For example:\n   -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n   -- assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Sorted_List_Sum (Lst : Unbounded_String_Array) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "verbatim", "tests": "\n   end Sorted_List_Sum;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Sorted_List_Sum;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"aa\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"aaa\"))) = (0 => To_Unbounded_String (\"aa\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"school\"), To_Unbounded_String (\"AI\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"b\"))) = (To_Unbounded_String (\"AI\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"school\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"d\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"a\"))) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((To_Unbounded_String (\"d\"), To_Unbounded_String (\"dcba\"), To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"a\"))) = (To_Unbounded_String (\"abcd\"), To_Unbounded_String (\"dcba\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"AI\"), To_Unbounded_String (\"ai\"), To_Unbounded_String (\"au\"))) = (To_Unbounded_String (\"AI\"), To_Unbounded_String (\"ai\"), To_Unbounded_String (\"au\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"a\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"b\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"c\"), To_Unbounded_String (\"a\"))) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((To_Unbounded_String (\"aaaa\"), To_Unbounded_String (\"bbbb\"), To_Unbounded_String (\"dd\"), To_Unbounded_String (\"cc\"))) = (To_Unbounded_String (\"cc\"), To_Unbounded_String (\"dd\"), To_Unbounded_String (\"aaaa\"), To_Unbounded_String (\"bbbb\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_14_all_prefixes", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function All_Prefixes (My_String : String) return Unbounded_String_Array;\n   -- Return list of all prefixes from shortest to longest of the input string\n   -- >>> all_prefixes('abc')\n   -- ['a', 'ab', 'abc']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function All_Prefixes (My_String : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_14_all_prefixes.py", "prompt_terminology": "verbatim", "tests": "\n   end All_Prefixes;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return Unbounded_String_Array renames Placeholder.All_Prefixes;\n\nbegin\n   pragma Assert (Candidate (\"\") = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"asdfgh\") = (To_Unbounded_String (\"a\"), To_Unbounded_String (\"as\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"asdf\"), To_Unbounded_String (\"asdfg\"), To_Unbounded_String (\"asdfgh\")));\n   pragma Assert (Candidate (\"WWW\") = (To_Unbounded_String (\"W\"), To_Unbounded_String (\"WW\"), To_Unbounded_String (\"WWW\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_150_x_or_y", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function X_Or_Y (N : Integer; X : Integer; Y : Integer) return Integer;\n   -- A simple program which should return the value of x if n is \n   -- a prime number and should return the value of y otherwise.\n   -- Examples:\n   -- for x_or_y(7, 34, 12) == 34\n   -- for x_or_y(15, 8, 5) == 5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function X_Or_Y (N : Integer; X : Integer; Y : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_150_x_or_y.py", "prompt_terminology": "verbatim", "tests": "\n   end X_Or_Y;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer; X : Integer; Y : Integer) return Integer renames Placeholder.X_Or_Y;\n\nbegin\n   pragma Assert (Candidate (7, 34, 12) = 34);\n   pragma Assert (Candidate (15, 8, 5) = 5);\n   pragma Assert (Candidate (3, 33, 5212) = 33);\n   pragma Assert (Candidate (1259, 3, 52) = 3);\n   pragma Assert (Candidate (7919, -1, 12) = -1);\n   pragma Assert (Candidate (3609, 1245, 583) = 583);\n   pragma Assert (Candidate (91, 56, 129) = 129);\n   pragma Assert (Candidate (6, 34, 1234) = 1234);\n   pragma Assert (Candidate (1, 2, 0) = 0);\n   pragma Assert (Candidate (2, 2, 0) = 2);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_151_double_the_difference", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   function Double_The_Difference (Lst : Float_Array) return Integer;\n   -- Given a list of numbers, return the sum of squares of the numbers\n   -- in the list that are odd. Ignore numbers that are negative or not integers.\n   -- double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n   -- double_the_difference([-1, -2, 0]) == 0\n   -- double_the_difference([9, -2]) == 81\n   -- double_the_difference([0]) == 0  \n   -- If the input list is empty, return 0.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Double_The_Difference (Lst : Float_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_151_double_the_difference.py", "prompt_terminology": "verbatim", "tests": "\n   end Double_The_Difference;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Float_Array) return Integer renames Placeholder.Double_The_Difference;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = 0);\n   pragma Assert (Candidate ((5.0, 4.0)) = 25);\n   pragma Assert (Candidate ((0.1, 0.2, 0.3)) = 0);\n   pragma Assert (Candidate ((-10.0, -20.0, -30.0)) = 0);\n   pragma Assert (Candidate ((-1.0, -2.0, 8.0)) = 0);\n   pragma Assert (Candidate ((0.2, 3.0, 5.0)) = 34);\n   pragma Assert (Candidate ((-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0)) = 165);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_152_compare", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Compare (Game : Integer_Array; Guess : Integer_Array) return Integer_Array;\n   -- I think we all remember that feeling when the result of some long-awaited\n   -- event is finally known. The feelings and thoughts you have at that moment are\n   -- definitely worth noting down and comparing.\n   -- Your task is to determine if a person correctly guessed the results of a number of matches.\n   -- You are given two arrays of scores and guesses of equal length, where each index shows a match. \n   -- Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n   -- the value is 0, and if not, the value is the absolute difference between the guess and the score.\n   -- example:\n   -- compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n   -- compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Compare (Game : Integer_Array; Guess : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_152_compare.py", "prompt_terminology": "verbatim", "tests": "\n   end Compare;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Game : Integer_Array; Guess : Integer_Array) return Integer_Array renames Placeholder.Compare;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 1), (1, 2, 3, 4, 2, -2)) = (0, 0, 0, 0, 3, 3));\n   pragma Assert (Candidate ((0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)) = (0, 0, 0, 0, 0, 0));\n   pragma Assert (Candidate ((1, 2, 3), (-1, -2, -3)) = (2, 4, 6));\n   pragma Assert (Candidate ((1, 2, 3, 5), (-1, 2, 3, 4)) = (2, 0, 0, 1));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_153_Strongest_Extension", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Strongest_Extension (Class_Name : String; Extensions : Unbounded_String_Array) return String;\n   -- You will be given the name of a class (a string) and a list of extensions.\n   -- The extensions are to be used to load additional classes to the class. The\n   -- strength of the extension is as follows: Let CAP be the number of the uppercase\n   -- letters in the extension's name, and let SM be the number of lowercase letters \n   -- in the extension's name, the strength is given by the fraction CAP - SM. \n   -- You should find the strongest extension and return a string in this \n   -- format: ClassName.StrongestExtensionName.\n   -- If there are two or more extensions with the same strength, you should\n   -- choose the one that comes first in the list.\n   -- For example, if you are given \"Slices\" as the class and a list of the\n   -- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n   -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   -- (its strength is -1).\n   -- Example:\n   -- for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Strongest_Extension (Class_Name : String; Extensions : Unbounded_String_Array) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "verbatim", "tests": "\n   end Strongest_Extension;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Class_Name : String; Extensions : Unbounded_String_Array) return String renames Placeholder.Strongest_Extension;\n\nbegin\n   pragma Assert (Candidate (\"Watashi\", (To_Unbounded_String (\"tEN\"), To_Unbounded_String (\"niNE\"), To_Unbounded_String (\"eIGHt8OKe\"))) = \"Watashi.eIGHt8OKe\");\n   pragma Assert (Candidate (\"Boku123\", (To_Unbounded_String (\"nani\"), To_Unbounded_String (\"NazeDa\"), To_Unbounded_String (\"YEs.WeCaNe\"), To_Unbounded_String (\"32145tggg\"))) = \"Boku123.YEs.WeCaNe\");\n   pragma Assert (Candidate (\"__YESIMHERE\", (To_Unbounded_String (\"t\"), To_Unbounded_String (\"eMptY\"), To_Unbounded_String (\"nothing\"), To_Unbounded_String (\"zeR00\"), To_Unbounded_String (\"NuLl__\"), To_Unbounded_String (\"123NoooneB321\"))) = \"__YESIMHERE.NuLl__\");\n   pragma Assert (Candidate (\"K\", (To_Unbounded_String (\"Ta\"), To_Unbounded_String (\"TAR\"), To_Unbounded_String (\"t234An\"), To_Unbounded_String (\"cosSo\"))) = \"K.TAR\");\n   pragma Assert (Candidate (\"__HAHA\", (To_Unbounded_String (\"Tab\"), To_Unbounded_String (\"123\"), To_Unbounded_String (\"781345\"), To_Unbounded_String (\"-_-\"))) = \"__HAHA.123\");\n   pragma Assert (Candidate (\"YameRore\", (To_Unbounded_String (\"HhAas\"), To_Unbounded_String (\"okIWILL123\"), To_Unbounded_String (\"WorkOut\"), To_Unbounded_String (\"Fails\"), To_Unbounded_String (\"-_-\"))) = \"YameRore.okIWILL123\");\n   pragma Assert (Candidate (\"finNNalLLly\", (To_Unbounded_String (\"Die\"), To_Unbounded_String (\"NowW\"), To_Unbounded_String (\"Wow\"), To_Unbounded_String (\"WoW\"))) = \"finNNalLLly.WoW\");\n   pragma Assert (Candidate (\"_\", (To_Unbounded_String (\"Bb\"), To_Unbounded_String (\"91245\"))) = \"_.Bb\");\n   pragma Assert (Candidate (\"Sp\", (To_Unbounded_String (\"671235\"), To_Unbounded_String (\"Bb\"))) = \"Sp.671235\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_154_cycpattern_check", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Cycpattern_Check (A : String; B : String) return Boolean;\n   -- You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n   -- cycpattern_check(\"abcd\",\"abd\") => False\n   -- cycpattern_check(\"hello\",\"ell\") => True\n   -- cycpattern_check(\"whassup\",\"psus\") => False\n   -- cycpattern_check(\"abab\",\"baa\") => True\n   -- cycpattern_check(\"efef\",\"eeff\") => False\n   -- cycpattern_check(\"himenss\",\"simen\") => True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Cycpattern_Check (A : String; B : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py", "prompt_terminology": "verbatim", "tests": "\n   end Cycpattern_Check;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : String; B : String) return Boolean renames Placeholder.Cycpattern_Check;\n\nbegin\n   pragma Assert (Candidate (\"xyzw\", \"xyw\") = False);\n   pragma Assert (Candidate (\"yello\", \"ell\") = True);\n   pragma Assert (Candidate (\"whattup\", \"ptut\") = False);\n   pragma Assert (Candidate (\"efef\", \"fee\") = True);\n   pragma Assert (Candidate (\"abab\", \"aabb\") = False);\n   pragma Assert (Candidate (\"winemtt\", \"tinem\") = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_155_even_odd_count", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Integer_Tuple is record\n     Integer_1 : Integer;\n     Integer_2 : Integer;\n   end record;\n\n   function Even_Odd_Count (Num : Integer) return Integer_Integer_Tuple;\n   -- Given an integer. return a tuple that has the number of even and odd digits respectively.\n   -- Example:\n   -- even_odd_count(-12) ==> (1, 1)\n   -- even_odd_count(123) ==> (1, 2)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Even_Odd_Count (Num : Integer) return Integer_Integer_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_155_even_odd_count.py", "prompt_terminology": "verbatim", "tests": "\n   end Even_Odd_Count;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Num : Integer) return Integer_Integer_Tuple renames Placeholder.Even_Odd_Count;\n\nbegin\n   pragma Assert (Candidate (7) = (0, 1));\n   pragma Assert (Candidate (-78) = (1, 1));\n   pragma Assert (Candidate (3452) = (2, 2));\n   pragma Assert (Candidate (346211) = (3, 3));\n   pragma Assert (Candidate (-345821) = (3, 3));\n   pragma Assert (Candidate (-2) = (1, 0));\n   pragma Assert (Candidate (-45347) = (2, 3));\n   pragma Assert (Candidate (0) = (1, 0));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_156_int_to_mini_roman", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Int_To_Mini_Roman (Number : Integer) return String;\n   -- Given a positive integer, obtain its roman numeral equivalent as a string,\n   -- and return it in lowercase.\n   -- Restrictions: 1 <= num <= 1000\n   -- Examples:\n   -- >>> int_to_mini_roman(19) == 'xix'\n   -- >>> int_to_mini_roman(152) == 'clii'\n   -- >>> int_to_mini_roman(426) == 'cdxxvi'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Int_To_Mini_Roman (Number : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "verbatim", "tests": "\n   end Int_To_Mini_Roman;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Number : Integer) return String renames Placeholder.Int_To_Mini_Roman;\n\nbegin\n   pragma Assert (Candidate (19) = \"xix\");\n   pragma Assert (Candidate (152) = \"clii\");\n   pragma Assert (Candidate (251) = \"ccli\");\n   pragma Assert (Candidate (426) = \"cdxxvi\");\n   pragma Assert (Candidate (500) = \"d\");\n   pragma Assert (Candidate (1) = \"i\");\n   pragma Assert (Candidate (4) = \"iv\");\n   pragma Assert (Candidate (43) = \"xliii\");\n   pragma Assert (Candidate (90) = \"xc\");\n   pragma Assert (Candidate (94) = \"xciv\");\n   pragma Assert (Candidate (532) = \"dxxxii\");\n   pragma Assert (Candidate (900) = \"cm\");\n   pragma Assert (Candidate (994) = \"cmxciv\");\n   pragma Assert (Candidate (1000) = \"m\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_157_right_angle_triangle", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Right_Angle_Triangle (A : Integer; B : Integer; C : Integer) return Boolean;\n   -- Given the lengths of the three sides of a triangle. Return True if the three\n   -- sides form a right-angled triangle, False otherwise.\n   -- A right-angled triangle is a triangle in which one angle is right angle or \n   -- 90 degree.\n   -- Example:\n   -- right_angle_triangle(3, 4, 5) == True\n   -- right_angle_triangle(1, 2, 3) == False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Right_Angle_Triangle (A : Integer; B : Integer; C : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "verbatim", "tests": "\n   end Right_Angle_Triangle;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; B : Integer; C : Integer) return Boolean renames Placeholder.Right_Angle_Triangle;\n\nbegin\n   pragma Assert (Candidate (3, 4, 5) = True);\n   pragma Assert (Candidate (1, 2, 3) = False);\n   pragma Assert (Candidate (10, 6, 8) = True);\n   pragma Assert (Candidate (2, 2, 2) = False);\n   pragma Assert (Candidate (7, 24, 25) = True);\n   pragma Assert (Candidate (10, 5, 7) = False);\n   pragma Assert (Candidate (5, 12, 13) = True);\n   pragma Assert (Candidate (15, 8, 17) = True);\n   pragma Assert (Candidate (48, 55, 73) = True);\n   pragma Assert (Candidate (1, 1, 1) = False);\n   pragma Assert (Candidate (2, 2, 10) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_158_find_max", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Find_Max (Words : Unbounded_String_Array) return String;\n   -- Write a function that accepts a list of strings.\n   -- The list contains different words. Return the word with maximum number\n   -- of unique characters. If multiple strings have maximum number of unique\n   -- characters, return the one which comes first in lexicographical order.\n   -- find_max([\"name\", \"of\", \"string\"]) == \"string\"\n   -- find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n   -- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Find_Max (Words : Unbounded_String_Array) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_158_find_max.py", "prompt_terminology": "verbatim", "tests": "\n   end Find_Max;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Words : Unbounded_String_Array) return String renames Placeholder.Find_Max;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"name\"), To_Unbounded_String (\"of\"), To_Unbounded_String (\"string\"))) = \"string\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"name\"), To_Unbounded_String (\"enam\"), To_Unbounded_String (\"game\"))) = \"enam\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"aaaaaaa\"), To_Unbounded_String (\"bb\"), To_Unbounded_String (\"cc\"))) = \"aaaaaaa\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"abc\"), To_Unbounded_String (\"cba\"))) = \"abc\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"play\"), To_Unbounded_String (\"this\"), To_Unbounded_String (\"game\"), To_Unbounded_String (\"of\"), To_Unbounded_String (\"footbott\"))) = \"footbott\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"we\"), To_Unbounded_String (\"are\"), To_Unbounded_String (\"gonna\"), To_Unbounded_String (\"rock\"))) = \"gonna\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"we\"), To_Unbounded_String (\"are\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"mad\"), To_Unbounded_String (\"nation\"))) = \"nation\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"this\"), To_Unbounded_String (\"is\"), To_Unbounded_String (\"a\"), To_Unbounded_String (\"prrk\"))) = \"this\");\n   pragma Assert (Candidate ((0 => To_Unbounded_String (\"b\"))) = \"b\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"play\"), To_Unbounded_String (\"play\"), To_Unbounded_String (\"play\"))) = \"play\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_159_eat", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Eat (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array;\n   -- You're a hungry rabbit, and you already have eaten a certain number of carrots,\n   -- but now you need to eat more carrots to complete the day's meals.\n   -- you should return an array of [ total number of eaten carrots after your meals,\n   -- the number of carrots left after your meals ]\n   -- if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n   -- Example:\n   -- * eat(5, 6, 10) -> [11, 4]\n   -- * eat(4, 8, 9) -> [12, 1]\n   -- * eat(1, 10, 10) -> [11, 0]\n   -- * eat(2, 11, 5) -> [7, 0]\n   -- Variables:\n   -- @number : integer\n   -- the number of carrots that you have eaten.\n   -- @need : integer\n   -- the number of carrots that you need to eat.\n   -- @remaining : integer\n   -- the number of remaining carrots thet exist in stock\n   -- Constrain:\n   -- * 0 <= number <= 1000\n   -- * 0 <= need <= 1000\n   -- * 0 <= remaining <= 1000\n   -- Have fun :)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Eat (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_159_eat.py", "prompt_terminology": "verbatim", "tests": "\n   end Eat;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Number : Integer; Need : Integer; Remaining : Integer) return Integer_Array renames Placeholder.Eat;\n\nbegin\n   pragma Assert (Candidate (5, 6, 10) = (11, 4));\n   pragma Assert (Candidate (4, 8, 9) = (12, 1));\n   pragma Assert (Candidate (1, 10, 10) = (11, 0));\n   pragma Assert (Candidate (2, 11, 5) = (7, 0));\n   pragma Assert (Candidate (4, 5, 7) = (9, 2));\n   pragma Assert (Candidate (4, 5, 1) = (5, 0));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_15_string_sequence", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function String_Sequence (N : Integer) return String;\n   -- Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n   -- >>> string_sequence(0)\n   -- '0'\n   -- >>> string_sequence(5)\n   -- '0 1 2 3 4 5'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function String_Sequence (N : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_15_string_sequence.py", "prompt_terminology": "verbatim", "tests": "\n   end String_Sequence;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return String renames Placeholder.String_Sequence;\n\nbegin\n   pragma Assert (Candidate (0) = \"0\");\n   pragma Assert (Candidate (3) = \"0 1 2 3\");\n   pragma Assert (Candidate (10) = \"0 1 2 3 4 5 6 7 8 9 10\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_160_do_algebra", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Do_Algebra (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer;\n   -- Given two lists operator, and operand. The first list has basic algebra operations, and \n   -- the second list is a list of integers. Use the two given lists to build the algebric \n   -- expression and return the evaluation of this expression.\n   -- The basic algebra operations:\n   -- Addition ( + ) \n   -- Subtraction ( - ) \n   -- Multiplication ( * ) \n   -- Floor division ( // ) \n   -- Exponentiation ( ** ) \n   -- Example:\n   -- operator['+', '*', '-']\n   -- array = [2, 3, 4, 5]\n   -- result = 2 + 3 * 4 - 5\n   -- => result = 9\n   -- Note:\n   -- The length of operator list is equal to the length of operand list minus one.\n   -- Operand is a list of of non-negative integers.\n   -- Operator list has at least one operator, and operand list has at least two operands.\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Do_Algebra (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_160_do_algebra.py", "prompt_terminology": "verbatim", "tests": "\n   end Do_Algebra;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Operator : Unbounded_String_Array; Operand : Integer_Array) return Integer renames Placeholder.Do_Algebra;\n\nbegin\n   pragma Assert (Candidate ((To_Unbounded_String (\"**\"), To_Unbounded_String (\"*\"), To_Unbounded_String (\"+\")), (2, 3, 4, 5)) = 37);\n   pragma Assert (Candidate ((To_Unbounded_String (\"+\"), To_Unbounded_String (\"*\"), To_Unbounded_String (\"-\")), (2, 3, 4, 5)) = 9);\n   pragma Assert (Candidate ((To_Unbounded_String (\"//\"), To_Unbounded_String (\"*\")), (7, 3, 4)) = 8);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_161_solve", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Solve (S : String) return String;\n   -- You are given a string s.\n   -- if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   -- otherwise keep it as it is.\n   -- If the string contains no letters, reverse the string.\n   -- The function should return the resulted string.\n   -- Examples\n   -- solve(\"1234\") = \"4321\"\n   -- solve(\"ab\") = \"AB\"\n   -- solve(\"#a@C\") = \"#A@c\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Solve (S : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_161_solve.py", "prompt_terminology": "verbatim", "tests": "\n   end Solve;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return String renames Placeholder.Solve;\n\nbegin\n   pragma Assert (Candidate (\"AsDf\") = \"aSdF\");\n   pragma Assert (Candidate (\"1234\") = \"4321\");\n   pragma Assert (Candidate (\"ab\") = \"AB\");\n   pragma Assert (Candidate (\"#a@C\") = \"#A@c\");\n   pragma Assert (Candidate (\"#AsdfW^45\") = \"#aSDFw^45\");\n   pragma Assert (Candidate (\"#6@2\") = \"2@6#\");\n   pragma Assert (Candidate (\"#$a^D\") = \"#$A^d\");\n   pragma Assert (Candidate (\"#ccc\") = \"#CCC\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_162_string_to_md5", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Unbounded_String;\n      when False =>\n         null;\n   end case;\nend record;\n   function String_To_Md5 (Text : String) return Unbounded_String_Option;\n   -- Given a string 'text', return its md5 hash equivalent string.\n   -- If 'text' is an empty string, return None.\n   -- >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function String_To_Md5 (Text : String) return Unbounded_String_Option", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_162_string_to_md5.py", "prompt_terminology": "verbatim", "tests": "\n   end String_To_Md5;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Text : String) return Unbounded_String_Option renames Placeholder.String_To_Md5;\n\nbegin\n   pragma Assert (Candidate (\"Hello world\") = (Valid => True, Value => \"M2UyNTk2MGE3OWRiYzY5YjY3NGNkNGVjNjdhNzJjNjI=\"));\n   pragma Assert (Candidate (\"\") = (Valid => False));\n   pragma Assert (Candidate (\"A B C\") = (Valid => True, Value => \"MGVmNzg1MTNiMGNiOGNlZjEyNzQzZjVhZWIzNWY4ODg=\"));\n   pragma Assert (Candidate (\"password\") = (Valid => True, Value => \"NWY0ZGNjM2I1YWE3NjVkNjFkODMyN2RlYjg4MmNmOTk=\"));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_163_generate_integers", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Generate_Integers (A : Integer; B : Integer) return Integer_Array;\n   -- Given two positive integers a and b, return the even digits between a\n   -- and b, in ascending order.\n   -- For example:\n   -- generate_integers(2, 8) => [2, 4, 6, 8]\n   -- generate_integers(8, 2) => [2, 4, 6, 8]\n   -- generate_integers(10, 14) => []\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Generate_Integers (A : Integer; B : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_163_generate_integers.py", "prompt_terminology": "verbatim", "tests": "\n   end Generate_Integers;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; B : Integer) return Integer_Array renames Placeholder.Generate_Integers;\n\nbegin\n   pragma Assert (Candidate (2, 10) = (2, 4, 6, 8));\n   pragma Assert (Candidate (10, 2) = (2, 4, 6, 8));\n   pragma Assert (Candidate (132, 2) = (2, 4, 6, 8));\n   pragma Assert (Candidate (17, 89) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_16_count_distinct_characters", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Count_Distinct_Characters (My_String : String) return Integer;\n   -- Given a string, find out how many distinct characters (regardless of case) does it consist of\n   -- >>> count_distinct_characters('xyzXYZ')\n   -- 3\n   -- >>> count_distinct_characters('Jerry')\n   -- 4\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Count_Distinct_Characters (My_String : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "verbatim", "tests": "\n   end Count_Distinct_Characters;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return Integer renames Placeholder.Count_Distinct_Characters;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"abcde\") = 5);\n   pragma Assert (Candidate (\"abcdecadeCADE\") = 5);\n   pragma Assert (Candidate (\"aaaaAAAAaaaa\") = 1);\n   pragma Assert (Candidate (\"Jerry jERRY JeRRRY\") = 5);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_17_parse_music", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Parse_Music (Music_String : String) return Integer_Array;\n   -- Input to this function is a string representing musical notes in a special ASCII format.\n   -- Your task is to parse this string and return list of integers corresponding to how many beats does each\n   -- not last.\n   -- Here is a legend:\n   -- 'o' - whole note, lasts four beats\n   -- 'o|' - half note, lasts two beats\n   -- '.|' - quater note, lasts one beat\n   -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   -- [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Parse_Music (Music_String : String) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_17_parse_music.py", "prompt_terminology": "verbatim", "tests": "\n   end Parse_Music;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Music_String : String) return Integer_Array renames Placeholder.Parse_Music;\n\nbegin\n   pragma Assert (Candidate (\"\") = (1 .. 0 => <>));\n   pragma Assert (Candidate (\"o o o o\") = (4, 4, 4, 4));\n   pragma Assert (Candidate (\".| .| .| .|\") = (1, 1, 1, 1));\n   pragma Assert (Candidate (\"o| o| .| .| o o o o\") = (2, 2, 1, 1, 4, 4, 4, 4));\n   pragma Assert (Candidate (\"o| .| o| .| o o| o o|\") = (2, 1, 2, 1, 4, 2, 4, 2));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_18_how_many_times", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function How_Many_Times (My_String : String; Substring : String) return Integer;\n   -- Find how many times a given substring can be found in the original string. Count overlaping cases.\n   -- >>> how_many_times('', 'a')\n   -- 0\n   -- >>> how_many_times('aaa', 'a')\n   -- 3\n   -- >>> how_many_times('aaaa', 'aa')\n   -- 3\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function How_Many_Times (My_String : String; Substring : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_18_how_many_times.py", "prompt_terminology": "verbatim", "tests": "\n   end How_Many_Times;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String; Substring : String) return Integer renames Placeholder.How_Many_Times;\n\nbegin\n   pragma Assert (Candidate (\"\", \"x\") = 0);\n   pragma Assert (Candidate (\"xyxyxyx\", \"x\") = 4);\n   pragma Assert (Candidate (\"cacacacac\", \"cac\") = 4);\n   pragma Assert (Candidate (\"john doe\", \"john\") = 1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_19_sort_numbers", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Sort_Numbers (Numbers : String) return String;\n   -- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n   -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n   -- Return the string with numbers sorted from smallest to largest\n   -- >>> sort_numbers('three one five')\n   -- 'one three five'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sort_Numbers (Numbers : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_19_sort_numbers.py", "prompt_terminology": "verbatim", "tests": "\n   end Sort_Numbers;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : String) return String renames Placeholder.Sort_Numbers;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"three\") = \"three\");\n   pragma Assert (Candidate (\"three five nine\") = \"three five nine\");\n   pragma Assert (Candidate (\"five zero four seven nine eight\") = \"zero four five seven eight nine\");\n   pragma Assert (Candidate (\"six five four three two one zero\") = \"zero one two three four five six\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_1_separate_paren_groups", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Separate_Paren_Groups (Paren_String : String) return Unbounded_String_Array;\n   -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n   -- separate those group into separate strings and return the list of those.\n   -- Separate groups are balanced (each open brace is properly closed) and not nested within each other\n   -- Ignore any spaces in the input string.\n   -- >>> separate_paren_groups('( ) (( )) (( )( ))')\n   -- ['()', '(())', '(()())']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Separate_Paren_Groups (Paren_String : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "verbatim", "tests": "\n   end Separate_Paren_Groups;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Paren_String : String) return Unbounded_String_Array renames Placeholder.Separate_Paren_Groups;\n\nbegin\n   pragma Assert (Candidate (\"(()()) ((())) () ((())()())\") = (To_Unbounded_String (\"(()())\"), To_Unbounded_String (\"((()))\"), To_Unbounded_String (\"()\"), To_Unbounded_String (\"((())()())\")));\n   pragma Assert (Candidate (\"() (()) ((())) (((())))\") = (To_Unbounded_String (\"()\"), To_Unbounded_String (\"(())\"), To_Unbounded_String (\"((()))\"), To_Unbounded_String (\"(((())))\")));\n   pragma Assert (Candidate (\"(()(())((())))\") = (0 => To_Unbounded_String (\"(()(())((())))\")));\n   pragma Assert (Candidate (\"( ) (( )) (( )( ))\") = (To_Unbounded_String (\"()\"), To_Unbounded_String (\"(())\"), To_Unbounded_String (\"(()())\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_20_find_closest_elements", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   type Float_Float_Tuple is record\n     Float_1 : Float;\n     Float_2 : Float;\n   end record;\n\n   function Find_Closest_Elements (Numbers : Float_Array) return Float_Float_Tuple;\n   -- From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n   -- other and return them in order (smaller number, larger number).\n   -- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n   -- (2.0, 2.2)\n   -- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n   -- (2.0, 2.0)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Find_Closest_Elements (Numbers : Float_Array) return Float_Float_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py", "prompt_terminology": "verbatim", "tests": "\n   end Find_Closest_Elements;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Float_Array) return Float_Float_Tuple renames Placeholder.Find_Closest_Elements;\n\nbegin\n   pragma Assert (Candidate ((1.0, 2.0, 3.9, 4.0, 5.0, 2.2)) = (3.9, 4.0));\n   pragma Assert (Candidate ((1.0, 2.0, 5.9, 4.0, 5.0)) = (5.0, 5.9));\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) = (2.0, 2.2));\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0, 5.0, 2.0)) = (2.0, 2.0));\n   pragma Assert (Candidate ((1.1, 2.2, 3.1, 4.1, 5.1)) = (2.2, 3.1));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_21_rescale_to_unit", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   function Rescale_To_Unit (Numbers : Float_Array) return Float_Array;\n   -- Given list of numbers (of at least two elements), apply a linear transform to that list,\n   -- such that the smallest number will become 0 and the largest will become 1\n   -- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n   -- [0.0, 0.25, 0.5, 0.75, 1.0]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Rescale_To_Unit (Numbers : Float_Array) return Float_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "verbatim", "tests": "\n   end Rescale_To_Unit;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Float_Array) return Float_Array renames Placeholder.Rescale_To_Unit;\n\nbegin\n   pragma Assert (Candidate ((2.0, 49.9)) = (0.0, 1.0));\n   pragma Assert (Candidate ((100.0, 49.9)) = (1.0, 0.0));\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0, 5.0)) = (0.0, 0.25, 0.5, 0.75, 1.0));\n   pragma Assert (Candidate ((2.0, 1.0, 5.0, 3.0, 4.0)) = (0.25, 0.0, 1.0, 0.5, 0.75));\n   pragma Assert (Candidate ((12.0, 11.0, 15.0, 13.0, 14.0)) = (0.25, 0.0, 1.0, 0.5, 0.75));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_23_strlen", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Strlen (My_String : String) return Integer;\n   -- Return length of given string\n   -- >>> strlen('')\n   -- 0\n   -- >>> strlen('abc')\n   -- 3\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Strlen (My_String : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_23_strlen.py", "prompt_terminology": "verbatim", "tests": "\n   end Strlen;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return Integer renames Placeholder.Strlen;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"x\") = 1);\n   pragma Assert (Candidate (\"asdasnakj\") = 9);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_24_largest_divisor", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Largest_Divisor (N : Integer) return Integer;\n   -- For a given number n, find the largest number that divides n evenly, smaller than n\n   -- >>> largest_divisor(15)\n   -- 5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Largest_Divisor (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_24_largest_divisor.py", "prompt_terminology": "verbatim", "tests": "\n   end Largest_Divisor;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Largest_Divisor;\n\nbegin\n   pragma Assert (Candidate (3) = 1);\n   pragma Assert (Candidate (7) = 1);\n   pragma Assert (Candidate (10) = 5);\n   pragma Assert (Candidate (100) = 50);\n   pragma Assert (Candidate (49) = 7);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_25_factorize", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Factorize (N : Integer) return Integer_Array;\n   -- Return list of prime factors of given integer in the order from smallest to largest.\n   -- Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n   -- Input number should be equal to the product of all factors\n   -- >>> factorize(8)\n   -- [2, 2, 2]\n   -- >>> factorize(25)\n   -- [5, 5]\n   -- >>> factorize(70)\n   -- [2, 5, 7]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Factorize (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_25_factorize.py", "prompt_terminology": "verbatim", "tests": "\n   end Factorize;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Factorize;\n\nbegin\n   pragma Assert (Candidate (2) = (0 => 2));\n   pragma Assert (Candidate (4) = (2, 2));\n   pragma Assert (Candidate (8) = (2, 2, 2));\n   pragma Assert (Candidate (57) = (3, 19));\n   pragma Assert (Candidate (3249) = (3, 3, 19, 19));\n   pragma Assert (Candidate (185193) = (3, 3, 3, 19, 19, 19));\n   pragma Assert (Candidate (20577) = (3, 19, 19, 19));\n   pragma Assert (Candidate (18) = (2, 3, 3));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_26_remove_duplicates", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Remove_Duplicates (Numbers : Integer_Array) return Integer_Array;\n   -- From a list of integers, remove all elements that occur more than once.\n   -- Keep order of elements left the same as in the input.\n   -- >>> remove_duplicates([1, 2, 3, 2, 4])\n   -- [1, 3, 4]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Remove_Duplicates (Numbers : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py", "prompt_terminology": "verbatim", "tests": "\n   end Remove_Duplicates;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Integer_Array) return Integer_Array renames Placeholder.Remove_Duplicates;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1, 2, 3, 4)) = (1, 2, 3, 4));\n   pragma Assert (Candidate ((1, 2, 3, 2, 4, 3, 5)) = (1, 4, 5));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_27_flip_case", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Flip_Case (My_String : String) return String;\n   -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n   -- >>> flip_case('Hello')\n   -- 'hELLO'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Flip_Case (My_String : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_27_flip_case.py", "prompt_terminology": "verbatim", "tests": "\n   end Flip_Case;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return String renames Placeholder.Flip_Case;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"Hello!\") = \"hELLO!\");\n   pragma Assert (Candidate (\"These violent delights have violent ends\") = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_28_concatenate", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Concatenate (Strings : Unbounded_String_Array) return String;\n   -- Concatenate list of strings into a single string\n   -- >>> concatenate([])\n   -- ''\n   -- >>> concatenate(['a', 'b', 'c'])\n   -- 'abc'\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Concatenate (Strings : Unbounded_String_Array) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_28_concatenate.py", "prompt_terminology": "verbatim", "tests": "\n   end Concatenate;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Strings : Unbounded_String_Array) return String renames Placeholder.Concatenate;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = \"\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\"))) = \"xyz\");\n   pragma Assert (Candidate ((To_Unbounded_String (\"x\"), To_Unbounded_String (\"y\"), To_Unbounded_String (\"z\"), To_Unbounded_String (\"w\"), To_Unbounded_String (\"k\"))) = \"xyzwk\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_29_filter_by_prefix", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Filter_By_Prefix (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array;\n   -- Filter an input list of strings only for ones that start with a given prefix.\n   -- >>> filter_by_prefix([], 'a')\n   -- []\n   -- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n   -- ['abc', 'array']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Filter_By_Prefix (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "verbatim", "tests": "\n   end Filter_By_Prefix;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Strings : Unbounded_String_Array; Prefix : String) return Unbounded_String_Array renames Placeholder.Filter_By_Prefix;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>), \"john\") = (1 .. 0 => <>));\n   pragma Assert (Candidate ((To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"xxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")), \"xxx\") = (To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_2_truncate_number", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Truncate_Number (Number : Float) return Float;\n   -- Given a positive floating point number, it can be decomposed into\n   -- and integer part (largest integer smaller than given number) and decimals\n   -- (leftover part always smaller than 1).\n   -- Return the decimal part of the number.\n   -- >>> truncate_number(3.5)\n   -- 0.5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Truncate_Number (Number : Float) return Float", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_2_truncate_number.py", "prompt_terminology": "verbatim", "tests": "\n   end Truncate_Number;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Number : Float) return Float renames Placeholder.Truncate_Number;\n\nbegin\n   pragma Assert (Candidate (3.5) = 0.5);\n   pragma Assert (Candidate (1.25) = 0.25);\n   pragma Assert (Candidate (123.0) = 0.0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_30_get_positive", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Get_Positive (L : Integer_Array) return Integer_Array;\n   -- Return only positive numbers in the list.\n   -- >>> get_positive([-1, 2, -4, 5, 6])\n   -- [2, 5, 6]\n   -- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   -- [5, 3, 2, 3, 9, 123, 1]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Get_Positive (L : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_30_get_positive.py", "prompt_terminology": "verbatim", "tests": "\n   end Get_Positive;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Get_Positive;\n\nbegin\n   pragma Assert (Candidate ((-1, -2, 4, 5, 6)) = (4, 5, 6));\n   pragma Assert (Candidate ((5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) = (5, 3, 2, 3, 3, 9, 123, 1));\n   pragma Assert (Candidate ((-1, -2)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_31_is_prime", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Prime (N : Integer) return Boolean;\n   -- Return true if a given number is prime, and false otherwise.\n   -- >>> is_prime(6)\n   -- False\n   -- >>> is_prime(101)\n   -- True\n   -- >>> is_prime(11)\n   -- True\n   -- >>> is_prime(13441)\n   -- True\n   -- >>> is_prime(61)\n   -- True\n   -- >>> is_prime(4)\n   -- False\n   -- >>> is_prime(1)\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Prime (N : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_31_is_prime.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Prime;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Boolean renames Placeholder.Is_Prime;\n\nbegin\n   pragma Assert (Candidate (6) = False);\n   pragma Assert (Candidate (101) = True);\n   pragma Assert (Candidate (11) = True);\n   pragma Assert (Candidate (13441) = True);\n   pragma Assert (Candidate (61) = True);\n   pragma Assert (Candidate (4) = False);\n   pragma Assert (Candidate (1) = False);\n   pragma Assert (Candidate (5) = True);\n   pragma Assert (Candidate (11) = True);\n   pragma Assert (Candidate (17) = True);\n   pragma Assert (Candidate (85) = False);\n   pragma Assert (Candidate (77) = False);\n   pragma Assert (Candidate (255379) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_33_sort_third", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Sort_Third (L : Integer_Array) return Integer_Array;\n   -- This function takes a list l and returns a list l' such that\n   -- l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n   -- to the values of the corresponding indicies of l, but sorted.\n   -- >>> sort_third([1, 2, 3])\n   -- [1, 2, 3]\n   -- >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n   -- [2, 6, 3, 4, 8, 9, 5]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sort_Third (L : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_33_sort_third.py", "prompt_terminology": "verbatim", "tests": "\n   end Sort_Third;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Sort_Third;\n\nbegin\n   pragma Assert (Candidate ((5, 6, 3, 4, 8, 9, 2)) = (2, 6, 3, 4, 8, 9, 5));\n   pragma Assert (Candidate ((5, 8, 3, 4, 6, 9, 2)) = (2, 8, 3, 4, 6, 9, 5));\n   pragma Assert (Candidate ((5, 6, 9, 4, 8, 3, 2)) = (2, 6, 9, 4, 8, 3, 5));\n   pragma Assert (Candidate ((5, 6, 3, 4, 8, 9, 2, 1)) = (2, 6, 3, 4, 8, 9, 5, 1));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_34_unique", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Unique (L : Integer_Array) return Integer_Array;\n   -- Return sorted unique elements in a list\n   -- >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   -- [0, 2, 3, 5, 9, 123]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Unique (L : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_34_unique.py", "prompt_terminology": "verbatim", "tests": "\n   end Unique;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Unique;\n\nbegin\n   pragma Assert (Candidate ((5, 3, 5, 2, 3, 3, 9, 0, 123)) = (0, 2, 3, 5, 9, 123));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_35_max_element", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Max_Element (L : Integer_Array) return Integer;\n   -- Return maximum element in the list.\n   -- >>> max_element([1, 2, 3])\n   -- 3\n   -- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   -- 123\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Max_Element (L : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_35_max_element.py", "prompt_terminology": "verbatim", "tests": "\n   end Max_Element;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer renames Placeholder.Max_Element;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3)) = 3);\n   pragma Assert (Candidate ((5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10)) = 124);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_36_fizz_buzz", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fizz_Buzz (N : Integer) return Integer;\n   -- Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n   -- >>> fizz_buzz(50)\n   -- 0\n   -- >>> fizz_buzz(78)\n   -- 2\n   -- >>> fizz_buzz(79)\n   -- 3\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fizz_Buzz (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py", "prompt_terminology": "verbatim", "tests": "\n   end Fizz_Buzz;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Fizz_Buzz;\n\nbegin\n   pragma Assert (Candidate (50) = 0);\n   pragma Assert (Candidate (78) = 2);\n   pragma Assert (Candidate (79) = 3);\n   pragma Assert (Candidate (100) = 3);\n   pragma Assert (Candidate (200) = 6);\n   pragma Assert (Candidate (4000) = 192);\n   pragma Assert (Candidate (10000) = 639);\n   pragma Assert (Candidate (100000) = 8026);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_37_sort_even", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Sort_Even (L : Integer_Array) return Integer_Array;\n   -- This function takes a list l and returns a list l' such that\n   -- l' is identical to l in the odd indicies, while its values at the even indicies are equal\n   -- to the values of the even indicies of l, but sorted.\n   -- >>> sort_even([1, 2, 3])\n   -- [1, 2, 3]\n   -- >>> sort_even([5, 6, 3, 4])\n   -- [3, 6, 5, 4]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sort_Even (L : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_37_sort_even.py", "prompt_terminology": "verbatim", "tests": "\n   end Sort_Even;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Sort_Even;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3)) = (1, 2, 3));\n   pragma Assert (Candidate ((5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) = (-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123));\n   pragma Assert (Candidate ((5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) = (-12, 8, 3, 4, 5, 2, 12, 11, 23, -10));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_39_prime_fib", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Prime_Fib (N : Integer) return Integer;\n   -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n   -- >>> prime_fib(1)\n   -- 2\n   -- >>> prime_fib(2)\n   -- 3\n   -- >>> prime_fib(3)\n   -- 5\n   -- >>> prime_fib(4)\n   -- 13\n   -- >>> prime_fib(5)\n   -- 89\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Prime_Fib (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_39_prime_fib.py", "prompt_terminology": "verbatim", "tests": "\n   end Prime_Fib;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Prime_Fib;\n\nbegin\n   pragma Assert (Candidate (1) = 2);\n   pragma Assert (Candidate (2) = 3);\n   pragma Assert (Candidate (3) = 5);\n   pragma Assert (Candidate (4) = 13);\n   pragma Assert (Candidate (5) = 89);\n   pragma Assert (Candidate (6) = 233);\n   pragma Assert (Candidate (7) = 1597);\n   pragma Assert (Candidate (8) = 28657);\n   pragma Assert (Candidate (9) = 514229);\n   pragma Assert (Candidate (10) = 433494437);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_3_below_zero", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Below_Zero (Operations : Integer_Array) return Boolean;\n   -- You're given a list of deposit and withdrawal operations on a bank account that starts with\n   -- zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n   -- at that point function should return True. Otherwise it should return False.\n   -- >>> below_zero([1, 2, 3])\n   -- False\n   -- >>> below_zero([1, 2, -4, 5])\n   -- True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Below_Zero (Operations : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_3_below_zero.py", "prompt_terminology": "verbatim", "tests": "\n   end Below_Zero;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Operations : Integer_Array) return Boolean renames Placeholder.Below_Zero;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = False);\n   pragma Assert (Candidate ((1, 2, -3, 1, 2, -3)) = False);\n   pragma Assert (Candidate ((1, 2, -4, 5, 6)) = True);\n   pragma Assert (Candidate ((1, -1, 2, -2, 5, -5, 4, -4)) = False);\n   pragma Assert (Candidate ((1, -1, 2, -2, 5, -5, 4, -5)) = True);\n   pragma Assert (Candidate ((1, -2, 2, -2, 5, -5, 4, -4)) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Triples_Sum_To_Zero (L : Integer_Array) return Boolean;\n   -- triples_sum_to_zero takes a list of integers as an input.\n   -- it returns True if there are three distinct elements in the list that\n   -- sum to zero, and False otherwise.\n   -- >>> triples_sum_to_zero([1, 3, 5, 0])\n   -- False\n   -- >>> triples_sum_to_zero([1, 3, -2, 1])\n   -- True\n   -- >>> triples_sum_to_zero([1, 2, 3, 7])\n   -- False\n   -- >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n   -- True\n   -- >>> triples_sum_to_zero([1])\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Triples_Sum_To_Zero (L : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "verbatim", "tests": "\n   end Triples_Sum_To_Zero;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Triples_Sum_To_Zero;\n\nbegin\n   pragma Assert (Candidate ((1, 3, 5, 0)) = False);\n   pragma Assert (Candidate ((1, 3, 5, -1)) = False);\n   pragma Assert (Candidate ((1, 3, -2, 1)) = True);\n   pragma Assert (Candidate ((1, 2, 3, 7)) = False);\n   pragma Assert (Candidate ((1, 2, 5, 7)) = False);\n   pragma Assert (Candidate ((2, 4, -5, 3, 9, 7)) = True);\n   pragma Assert (Candidate ((0 => 1)) = False);\n   pragma Assert (Candidate ((1, 3, 5, -100)) = False);\n   pragma Assert (Candidate ((100, 3, 5, -100)) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_41_car_race_collision", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Car_Race_Collision (N : Integer) return Integer;\n   -- Imagine a road that's a perfectly straight infinitely long line.\n   -- n cars are driving left to right;  simultaneously, a different set of n cars\n   -- are driving right to left.   The two sets of cars start out being very far from\n   -- each other.  All cars move in the same speed.  Two cars are said to collide\n   -- when a car that's moving left to right hits a car that's moving right to left.\n   -- However, the cars are infinitely sturdy and strong; as a result, they continue moving\n   -- in their trajectory as if they did not collide.\n   -- This function outputs the number of such collisions.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Car_Race_Collision (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_41_car_race_collision.py", "prompt_terminology": "verbatim", "tests": "\n   end Car_Race_Collision;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Car_Race_Collision;\n\nbegin\n   pragma Assert (Candidate (2) = 4);\n   pragma Assert (Candidate (3) = 9);\n   pragma Assert (Candidate (4) = 16);\n   pragma Assert (Candidate (8) = 64);\n   pragma Assert (Candidate (10) = 100);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_42_incr_list", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Incr_List (L : Integer_Array) return Integer_Array;\n   -- Return list with elements incremented by 1.\n   -- >>> incr_list([1, 2, 3])\n   -- [2, 3, 4]\n   -- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   -- [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Incr_List (L : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_42_incr_list.py", "prompt_terminology": "verbatim", "tests": "\n   end Incr_List;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Integer_Array renames Placeholder.Incr_List;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((3, 2, 1)) = (4, 3, 2));\n   pragma Assert (Candidate ((5, 2, 5, 2, 3, 3, 9, 0, 123)) = (6, 3, 6, 3, 4, 4, 10, 1, 124));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Pairs_Sum_To_Zero (L : Integer_Array) return Boolean;\n   -- pairs_sum_to_zero takes a list of integers as an input.\n   -- it returns True if there are two distinct elements in the list that\n   -- sum to zero, and False otherwise.\n   -- >>> pairs_sum_to_zero([1, 3, 5, 0])\n   -- False\n   -- >>> pairs_sum_to_zero([1, 3, -2, 1])\n   -- False\n   -- >>> pairs_sum_to_zero([1, 2, 3, 7])\n   -- False\n   -- >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n   -- True\n   -- >>> pairs_sum_to_zero([1])\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Pairs_Sum_To_Zero (L : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "verbatim", "tests": "\n   end Pairs_Sum_To_Zero;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Pairs_Sum_To_Zero;\n\nbegin\n   pragma Assert (Candidate ((1, 3, 5, 0)) = False);\n   pragma Assert (Candidate ((1, 3, -2, 1)) = False);\n   pragma Assert (Candidate ((1, 2, 3, 7)) = False);\n   pragma Assert (Candidate ((2, 4, -5, 3, 5, 7)) = True);\n   pragma Assert (Candidate ((0 => 1)) = False);\n   pragma Assert (Candidate ((-3, 9, -1, 3, 2, 30)) = True);\n   pragma Assert (Candidate ((-3, 9, -1, 3, 2, 31)) = True);\n   pragma Assert (Candidate ((-3, 9, -1, 4, 2, 30)) = False);\n   pragma Assert (Candidate ((-3, 9, -1, 4, 2, 31)) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_44_change_base", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Change_Base (X : Integer; Base : Integer) return String;\n   -- Change numerical base of input number x to base.\n   -- return string representation after the conversion.\n   -- base numbers are less than 10.\n   -- >>> change_base(8, 3)\n   -- '22'\n   -- >>> change_base(8, 2)\n   -- '1000'\n   -- >>> change_base(7, 2)\n   -- '111'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Change_Base (X : Integer; Base : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_44_change_base.py", "prompt_terminology": "verbatim", "tests": "\n   end Change_Base;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer; Base : Integer) return String renames Placeholder.Change_Base;\n\nbegin\n   pragma Assert (Candidate (8, 3) = \"22\");\n   pragma Assert (Candidate (9, 3) = \"100\");\n   pragma Assert (Candidate (234, 2) = \"11101010\");\n   pragma Assert (Candidate (16, 2) = \"10000\");\n   pragma Assert (Candidate (8, 2) = \"1000\");\n   pragma Assert (Candidate (7, 2) = \"111\");\n   pragma Assert (Candidate (2, 3) = \"2\");\n   pragma Assert (Candidate (3, 4) = \"3\");\n   pragma Assert (Candidate (4, 5) = \"4\");\n   pragma Assert (Candidate (5, 6) = \"5\");\n   pragma Assert (Candidate (6, 7) = \"6\");\n   pragma Assert (Candidate (7, 8) = \"7\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_45_triangle_area", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Triangle_Area (A : Integer; H : Integer) return Float;\n   -- Given length of a side and high return area for a triangle.\n   -- >>> triangle_area(5, 3)\n   -- 7.5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Triangle_Area (A : Integer; H : Integer) return Float", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_45_triangle_area.py", "prompt_terminology": "verbatim", "tests": "\n   end Triangle_Area;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; H : Integer) return Float renames Placeholder.Triangle_Area;\n\nbegin\n   pragma Assert (Candidate (5, 3) = 7.5);\n   pragma Assert (Candidate (2, 2) = 2.0);\n   pragma Assert (Candidate (10, 8) = 40.0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_46_fib4", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fib4 (N : Integer) return Integer;\n   -- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n   -- fib4(0) -> 0\n   -- fib4(1) -> 0\n   -- fib4(2) -> 2\n   -- fib4(3) -> 0\n   -- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   -- Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n   -- >>> fib4(5)\n   -- 4\n   -- >>> fib4(6)\n   -- 8\n   -- >>> fib4(7)\n   -- 14\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fib4 (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_46_fib4.py", "prompt_terminology": "verbatim", "tests": "\n   end Fib4;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Fib4;\n\nbegin\n   pragma Assert (Candidate (5) = 4);\n   pragma Assert (Candidate (8) = 28);\n   pragma Assert (Candidate (10) = 104);\n   pragma Assert (Candidate (12) = 386);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_47_median", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Median (L : Integer_Array) return Float;\n   -- Return median of elements in the list l.\n   -- >>> median([3, 1, 2, 4, 5])\n   -- 3\n   -- >>> median([-10, 4, 6, 1000, 10, 20])\n   -- 15.0\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Median (L : Integer_Array) return Float", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_47_median.py", "prompt_terminology": "verbatim", "tests": "\n   end Median;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Float renames Placeholder.Median;\n\nbegin\n   pragma Assert (Candidate ((3, 1, 2, 4, 5)) = 3);\n   pragma Assert (Candidate ((-10, 4, 6, 1000, 10, 20)) = 8.0);\n   pragma Assert (Candidate ((0 => 5)) = 5);\n   pragma Assert (Candidate ((6, 5)) = 5.5);\n   pragma Assert (Candidate ((8, 1, 3, 9, 9, 2, 7)) = 7);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_48_is_palindrome", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Palindrome (Text : String) return Boolean;\n   -- Checks if given string is a palindrome\n   -- >>> is_palindrome('')\n   -- True\n   -- >>> is_palindrome('aba')\n   -- True\n   -- >>> is_palindrome('aaaaa')\n   -- True\n   -- >>> is_palindrome('zbcd')\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Palindrome (Text : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_48_is_palindrome.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Palindrome;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Text : String) return Boolean renames Placeholder.Is_Palindrome;\n\nbegin\n   pragma Assert (Candidate (\"\") = True);\n   pragma Assert (Candidate (\"aba\") = True);\n   pragma Assert (Candidate (\"aaaaa\") = True);\n   pragma Assert (Candidate (\"zbcd\") = False);\n   pragma Assert (Candidate (\"xywyx\") = True);\n   pragma Assert (Candidate (\"xywyz\") = False);\n   pragma Assert (Candidate (\"xywzx\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_49_modp", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Modp (N : Integer; P : Integer) return Integer;\n   -- Return 2^n modulo p (be aware of numerics).\n   -- >>> modp(3, 5)\n   -- 3\n   -- >>> modp(1101, 101)\n   -- 2\n   -- >>> modp(0, 101)\n   -- 1\n   -- >>> modp(3, 11)\n   -- 8\n   -- >>> modp(100, 101)\n   -- 1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Modp (N : Integer; P : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_49_modp.py", "prompt_terminology": "verbatim", "tests": "\n   end Modp;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer; P : Integer) return Integer renames Placeholder.Modp;\n\nbegin\n   pragma Assert (Candidate (3, 5) = 3);\n   pragma Assert (Candidate (1101, 101) = 2);\n   pragma Assert (Candidate (0, 101) = 1);\n   pragma Assert (Candidate (3, 11) = 8);\n   pragma Assert (Candidate (100, 101) = 1);\n   pragma Assert (Candidate (30, 5) = 4);\n   pragma Assert (Candidate (31, 5) = 3);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   function Mean_Absolute_Deviation (Numbers : Float_Array) return Float;\n   -- For a given list of input numbers, calculate Mean Absolute Deviation\n   -- around the mean of this dataset.\n   -- Mean Absolute Deviation is the average absolute difference between each\n   -- element and a centerpoint (mean in this case):\n   -- MAD = average | x - x_mean |\n   -- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n   -- 1.0\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Mean_Absolute_Deviation (Numbers : Float_Array) return Float", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "verbatim", "tests": "\n   end Mean_Absolute_Deviation;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Float_Array) return Float renames Placeholder.Mean_Absolute_Deviation;\n\nbegin\n   pragma Assert (Candidate ((1.0, 2.0)) = 0.5);\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0)) = 1.0);\n   pragma Assert (Candidate ((1.0, 2.0, 3.0, 4.0, 5.0)) = 1.2);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_51_remove_vowels", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Remove_Vowels (Text : String) return String;\n   -- remove_vowels is a function that takes string and returns string without vowels.\n   -- >>> remove_vowels('')\n   -- ''\n   -- >>> remove_vowels('abcdef')\n   -- 'bcdf'\n   -- >>> remove_vowels('aaaaa')\n   -- ''\n   -- >>> remove_vowels('aaBAA')\n   -- 'B'\n   -- >>> remove_vowels('zbcd')\n   -- 'zbcd'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Remove_Vowels (Text : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_51_remove_vowels.py", "prompt_terminology": "verbatim", "tests": "\n   end Remove_Vowels;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Text : String) return String renames Placeholder.Remove_Vowels;\n\nbegin\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"abcdef\nghijklm\") = \"bcdf\nghjklm\");\n   pragma Assert (Candidate (\"fedcba\") = \"fdcb\");\n   pragma Assert (Candidate (\"eeeee\") = \"\");\n   pragma Assert (Candidate (\"acBAA\") = \"cB\");\n   pragma Assert (Candidate (\"EcBOO\") = \"cB\");\n   pragma Assert (Candidate (\"ybcd\") = \"ybcd\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_52_below_threshold", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Below_Threshold (L : Integer_Array; T : Integer) return Boolean;\n   -- Return True if all numbers in the list l are below threshold t.\n   -- >>> below_threshold([1, 2, 4, 10], 100)\n   -- True\n   -- >>> below_threshold([1, 20, 4, 10], 5)\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Below_Threshold (L : Integer_Array; T : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_52_below_threshold.py", "prompt_terminology": "verbatim", "tests": "\n   end Below_Threshold;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array; T : Integer) return Boolean renames Placeholder.Below_Threshold;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 4, 10), 100) = True);\n   pragma Assert (Candidate ((1, 20, 4, 10), 5) = False);\n   pragma Assert (Candidate ((1, 20, 4, 10), 21) = True);\n   pragma Assert (Candidate ((1, 20, 4, 10), 22) = True);\n   pragma Assert (Candidate ((1, 8, 4, 10), 11) = True);\n   pragma Assert (Candidate ((1, 8, 4, 10), 10) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_53_add", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Add (X : Integer; Y : Integer) return Integer;\n   -- Add two numbers x and y\n   -- >>> add(2, 3)\n   -- 5\n   -- >>> add(5, 7)\n   -- 12\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Add (X : Integer; Y : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_53_add.py", "prompt_terminology": "verbatim", "tests": "\n   end Add;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer; Y : Integer) return Integer renames Placeholder.Add;\n\nbegin\n   pragma Assert (Candidate (0, 1) = 1);\n   pragma Assert (Candidate (1, 0) = 1);\n   pragma Assert (Candidate (2, 3) = 5);\n   pragma Assert (Candidate (5, 7) = 12);\n   pragma Assert (Candidate (7, 5) = 12);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_54_same_chars", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Same_Chars (S0 : String; S1 : String) return Boolean;\n   -- Check if two words have the same characters.\n   -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n   -- True\n   -- >>> same_chars('abcd', 'dddddddabc')\n   -- True\n   -- >>> same_chars('dddddddabc', 'abcd')\n   -- True\n   -- >>> same_chars('eabcd', 'dddddddabc')\n   -- False\n   -- >>> same_chars('abcd', 'dddddddabce')\n   -- False\n   -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Same_Chars (S0 : String; S1 : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_54_same_chars.py", "prompt_terminology": "verbatim", "tests": "\n   end Same_Chars;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S0 : String; S1 : String) return Boolean renames Placeholder.Same_Chars;\n\nbegin\n   pragma Assert (Candidate (\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") = True);\n   pragma Assert (Candidate (\"abcd\", \"dddddddabc\") = True);\n   pragma Assert (Candidate (\"dddddddabc\", \"abcd\") = True);\n   pragma Assert (Candidate (\"eabcd\", \"dddddddabc\") = False);\n   pragma Assert (Candidate (\"abcd\", \"dddddddabcf\") = False);\n   pragma Assert (Candidate (\"eabcdzzzz\", \"dddzzzzzzzddddabc\") = False);\n   pragma Assert (Candidate (\"aabb\", \"aaccc\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_55_fib", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fib (N : Integer) return Integer;\n   -- Return n-th Fibonacci number.\n   -- >>> fib(10)\n   -- 55\n   -- >>> fib(1)\n   -- 1\n   -- >>> fib(8)\n   -- 21\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fib (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_55_fib.py", "prompt_terminology": "verbatim", "tests": "\n   end Fib;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Fib;\n\nbegin\n   pragma Assert (Candidate (10) = 55);\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (8) = 21);\n   pragma Assert (Candidate (11) = 89);\n   pragma Assert (Candidate (12) = 144);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_56_correct_bracketing", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean;\n   -- brackets is a string of \"<\" and \">\".\n   -- return True if every opening bracket has a corresponding closing bracket.\n   -- >>> correct_bracketing(\"<\")\n   -- False\n   -- >>> correct_bracketing(\"<>\")\n   -- True\n   -- >>> correct_bracketing(\"<<><>>\")\n   -- True\n   -- >>> correct_bracketing(\"><<>\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py", "prompt_terminology": "verbatim", "tests": "\n   end Correct_Bracketing;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Brackets : String) return Boolean renames Placeholder.Correct_Bracketing;\n\nbegin\n   pragma Assert (Candidate (\"<>\") = True);\n   pragma Assert (Candidate (\"<<><>>\") = True);\n   pragma Assert (Candidate (\"<><><<><>><>\") = True);\n   pragma Assert (Candidate (\"<><><<<><><>><>><<><><<>>>\") = True);\n   pragma Assert (Candidate (\"<<<><>>>>\") = False);\n   pragma Assert (Candidate (\"><<>\") = False);\n   pragma Assert (Candidate (\"<\") = False);\n   pragma Assert (Candidate (\"<<<<\") = False);\n   pragma Assert (Candidate (\">\") = False);\n   pragma Assert (Candidate (\"<<>\") = False);\n   pragma Assert (Candidate (\"<><><<><>><>><<>\") = False);\n   pragma Assert (Candidate (\"<><><<><>><>>><>\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_57_monotonic", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Monotonic (L : Integer_Array) return Boolean;\n   -- Return True is list elements are monotonically increasing or decreasing.\n   -- >>> monotonic([1, 2, 4, 20])\n   -- True\n   -- >>> monotonic([1, 20, 4, 10])\n   -- False\n   -- >>> monotonic([4, 1, 0, -10])\n   -- True\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Monotonic (L : Integer_Array) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_57_monotonic.py", "prompt_terminology": "verbatim", "tests": "\n   end Monotonic;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L : Integer_Array) return Boolean renames Placeholder.Monotonic;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 4, 10)) = True);\n   pragma Assert (Candidate ((1, 2, 4, 20)) = True);\n   pragma Assert (Candidate ((1, 20, 4, 10)) = False);\n   pragma Assert (Candidate ((4, 1, 0, -10)) = True);\n   pragma Assert (Candidate ((4, 1, 1, 0)) = True);\n   pragma Assert (Candidate ((1, 2, 3, 2, 5, 60)) = False);\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 60)) = True);\n   pragma Assert (Candidate ((9, 9, 9, 9)) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_58_common", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Common (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array;\n   -- Return sorted unique common elements for two lists.\n   -- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n   -- [1, 5, 653]\n   -- >>> common([5, 3, 2, 8], [3, 2])\n   -- [2, 3]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Common (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_58_common.py", "prompt_terminology": "verbatim", "tests": "\n   end Common;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (L1 : Integer_Array; L2 : Integer_Array) return Integer_Array renames Placeholder.Common;\n\nbegin\n   pragma Assert (Candidate ((1, 4, 3, 34, 653, 2, 5), (5, 7, 1, 5, 9, 653, 121)) = (1, 5, 653));\n   pragma Assert (Candidate ((5, 3, 2, 8), (3, 2)) = (2, 3));\n   pragma Assert (Candidate ((4, 3, 2, 8), (3, 2, 4)) = (2, 3, 4));\n   pragma Assert (Candidate ((4, 3, 2, 8), (1 .. 0 => <>)) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_59_largest_prime_factor", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Largest_Prime_Factor (N : Integer) return Integer;\n   -- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n   -- >>> largest_prime_factor(13195)\n   -- 29\n   -- >>> largest_prime_factor(2048)\n   -- 2\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Largest_Prime_Factor (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "verbatim", "tests": "\n   end Largest_Prime_Factor;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Largest_Prime_Factor;\n\nbegin\n   pragma Assert (Candidate (15) = 5);\n   pragma Assert (Candidate (27) = 3);\n   pragma Assert (Candidate (63) = 7);\n   pragma Assert (Candidate (330) = 11);\n   pragma Assert (Candidate (13195) = 29);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_5_intersperse", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Intersperse (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array;\n   -- Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n   -- >>> intersperse([], 4)\n   -- []\n   -- >>> intersperse([1, 2, 3], 4)\n   -- [1, 4, 2, 4, 3]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Intersperse (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_5_intersperse.py", "prompt_terminology": "verbatim", "tests": "\n   end Intersperse;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Integer_Array; Delimeter : Integer) return Integer_Array renames Placeholder.Intersperse;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>), 7) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((5, 6, 3, 2), 8) = (5, 8, 6, 8, 3, 8, 2));\n   pragma Assert (Candidate ((2, 2, 2), 2) = (2, 2, 2, 2, 2));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_60_sum_to_n", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Sum_To_N (N : Integer) return Integer;\n   -- sum_to_n is a function that sums numbers from 1 to n.\n   -- >>> sum_to_n(30)\n   -- 465\n   -- >>> sum_to_n(100)\n   -- 5050\n   -- >>> sum_to_n(5)\n   -- 15\n   -- >>> sum_to_n(10)\n   -- 55\n   -- >>> sum_to_n(1)\n   -- 1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sum_To_N (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_60_sum_to_n.py", "prompt_terminology": "verbatim", "tests": "\n   end Sum_To_N;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Sum_To_N;\n\nbegin\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (6) = 21);\n   pragma Assert (Candidate (11) = 66);\n   pragma Assert (Candidate (30) = 465);\n   pragma Assert (Candidate (100) = 5050);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_61_correct_bracketing", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean;\n   -- brackets is a string of \"(\" and \")\".\n   -- return True if every opening bracket has a corresponding closing bracket.\n   -- >>> correct_bracketing(\"(\")\n   -- False\n   -- >>> correct_bracketing(\"()\")\n   -- True\n   -- >>> correct_bracketing(\"(()())\")\n   -- True\n   -- >>> correct_bracketing(\")(()\")\n   -- False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Correct_Bracketing (Brackets : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py", "prompt_terminology": "verbatim", "tests": "\n   end Correct_Bracketing;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Brackets : String) return Boolean renames Placeholder.Correct_Bracketing;\n\nbegin\n   pragma Assert (Candidate (\"()\") = True);\n   pragma Assert (Candidate (\"(()())\") = True);\n   pragma Assert (Candidate (\"()()(()())()\") = True);\n   pragma Assert (Candidate (\"()()((()()())())(()()(()))\") = True);\n   pragma Assert (Candidate (\"((()())))\") = False);\n   pragma Assert (Candidate (\")(()\") = False);\n   pragma Assert (Candidate (\"(\") = False);\n   pragma Assert (Candidate (\"((((\") = False);\n   pragma Assert (Candidate (\")\") = False);\n   pragma Assert (Candidate (\"(()\") = False);\n   pragma Assert (Candidate (\"()()(()())())(()\") = False);\n   pragma Assert (Candidate (\"()()(()())()))()\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_62_derivative", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Derivative (Xs : Integer_Array) return Integer_Array;\n   -- xs represent coefficients of a polynomial.\n   -- xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   -- Return derivative of this polynomial in the same form.\n   -- >>> derivative([3, 1, 2, 4, 5])\n   -- [1, 4, 12, 20]\n   -- >>> derivative([1, 2, 3])\n   -- [2, 6]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Derivative (Xs : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_62_derivative.py", "prompt_terminology": "verbatim", "tests": "\n   end Derivative;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Xs : Integer_Array) return Integer_Array renames Placeholder.Derivative;\n\nbegin\n   pragma Assert (Candidate ((3, 1, 2, 4, 5)) = (1, 4, 12, 20));\n   pragma Assert (Candidate ((1, 2, 3)) = (2, 6));\n   pragma Assert (Candidate ((3, 2, 1)) = (2, 2));\n   pragma Assert (Candidate ((3, 2, 1, 0, 4)) = (2, 2, 0, 16));\n   pragma Assert (Candidate ((0 => 1)) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_63_fibfib", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fibfib (N : Integer) return Integer;\n   -- The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n   -- fibfib(0) == 0\n   -- fibfib(1) == 0\n   -- fibfib(2) == 1\n   -- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   -- Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n   -- >>> fibfib(1)\n   -- 0\n   -- >>> fibfib(5)\n   -- 4\n   -- >>> fibfib(8)\n   -- 24\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fibfib (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_63_fibfib.py", "prompt_terminology": "verbatim", "tests": "\n   end Fibfib;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Fibfib;\n\nbegin\n   pragma Assert (Candidate (2) = 1);\n   pragma Assert (Candidate (1) = 0);\n   pragma Assert (Candidate (5) = 4);\n   pragma Assert (Candidate (8) = 24);\n   pragma Assert (Candidate (10) = 81);\n   pragma Assert (Candidate (12) = 274);\n   pragma Assert (Candidate (14) = 927);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_64_vowels_count", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Vowels_Count (S : String) return Integer;\n   -- Write a function vowels_count which takes a string representing\n   -- a word as input and returns the number of vowels in the string.\n   -- Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n   -- vowel, but only when it is at the end of the given word.\n   -- Example:\n   -- >>> vowels_count(\"abcde\")\n   -- 2\n   -- >>> vowels_count(\"ACEDY\")\n   -- 3\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Vowels_Count (S : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_64_vowels_count.py", "prompt_terminology": "verbatim", "tests": "\n   end Vowels_Count;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Integer renames Placeholder.Vowels_Count;\n\nbegin\n   pragma Assert (Candidate (\"abcde\") = 2);\n   pragma Assert (Candidate (\"Alone\") = 3);\n   pragma Assert (Candidate (\"key\") = 2);\n   pragma Assert (Candidate (\"bye\") = 1);\n   pragma Assert (Candidate (\"keY\") = 2);\n   pragma Assert (Candidate (\"bYe\") = 1);\n   pragma Assert (Candidate (\"ACEDY\") = 3);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_65_circular_shift", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Circular_Shift (X : Integer; Shift : Integer) return String;\n   -- Circular shift the digits of the integer x, shift the digits right by shift\n   -- and return the result as a string.\n   -- If shift > number of digits, return digits reversed.\n   -- >>> circular_shift(12, 1)\n   -- \"21\"\n   -- >>> circular_shift(12, 2)\n   -- \"12\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Circular_Shift (X : Integer; Shift : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_65_circular_shift.py", "prompt_terminology": "verbatim", "tests": "\n   end Circular_Shift;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer; Shift : Integer) return String renames Placeholder.Circular_Shift;\n\nbegin\n   pragma Assert (Candidate (100, 2) = \"001\");\n   pragma Assert (Candidate (12, 2) = \"12\");\n   pragma Assert (Candidate (97, 8) = \"79\");\n   pragma Assert (Candidate (12, 1) = \"21\");\n   pragma Assert (Candidate (11, 101) = \"11\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_66_digitSum", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Digit_Sum (S : String) return Integer;\n   -- Task\n   -- Write a function that takes a string as input and returns the sum of the upper characters only'\n   -- ASCII codes.\n   -- Examples:\n   -- digitSum(\"\") => 0\n   -- digitSum(\"abAB\") => 131\n   -- digitSum(\"abcCd\") => 67\n   -- digitSum(\"helloE\") => 69\n   -- digitSum(\"woArBld\") => 131\n   -- digitSum(\"aAaaaXa\") => 153\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Digit_Sum (S : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_66_digitSum.py", "prompt_terminology": "verbatim", "tests": "\n   end Digit_Sum;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Integer renames Placeholder.Digit_Sum;\n\nbegin\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"abAB\") = 131);\n   pragma Assert (Candidate (\"abcCd\") = 67);\n   pragma Assert (Candidate (\"helloE\") = 69);\n   pragma Assert (Candidate (\"woArBld\") = 131);\n   pragma Assert (Candidate (\"aAaaaXa\") = 153);\n   pragma Assert (Candidate (\" How are yOu?\") = 151);\n   pragma Assert (Candidate (\"You arE Very Smart\") = 327);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_67_fruit_distribution", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Fruit_Distribution (S : String; N : Integer) return Integer;\n   -- In this task, you will be given a string that represents a number of apples and oranges \n   -- that are distributed in a basket of fruit this basket contains \n   -- apples, oranges, and mango fruits. Given the string that represents the total number of \n   -- the oranges and apples and an integer that represent the total number of the fruits \n   -- in the basket return the number of the mango fruits in the basket.\n   -- for examble:\n   -- fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n   -- fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n   -- fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n   -- fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Fruit_Distribution (S : String; N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py", "prompt_terminology": "verbatim", "tests": "\n   end Fruit_Distribution;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String; N : Integer) return Integer renames Placeholder.Fruit_Distribution;\n\nbegin\n   pragma Assert (Candidate (\"5 apples and 6 oranges\", 19) = 8);\n   pragma Assert (Candidate (\"5 apples and 6 oranges\", 21) = 10);\n   pragma Assert (Candidate (\"0 apples and 1 oranges\", 3) = 2);\n   pragma Assert (Candidate (\"1 apples and 0 oranges\", 3) = 2);\n   pragma Assert (Candidate (\"2 apples and 3 oranges\", 100) = 95);\n   pragma Assert (Candidate (\"2 apples and 3 oranges\", 5) = 0);\n   pragma Assert (Candidate (\"1 apples and 100 oranges\", 120) = 19);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_68_pluck", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Pluck (Arr : Integer_Array) return Integer_Array;\n   -- \"Given an array representing a branch of a tree that has non-negative integer nodes\n   -- your task is to pluck one of the nodes and return it.\n   -- The plucked node should be the node with the smallest even value.\n   -- If multiple nodes with the same smallest even value are found return the node that has smallest index.\n   -- The plucked node should be returned in a list, [ smalest_value, its index ],\n   -- If there are no even values or the given array is empty, return [].\n   -- Example 1:\n   -- Input: [4,2,3]\n   -- Output: [2, 1]\n   -- Explanation: 2 has the smallest even value, and 2 has the smallest index.\n   -- Example 2:\n   -- Input: [1,2,3]\n   -- Output: [2, 1]\n   -- Explanation: 2 has the smallest even value, and 2 has the smallest index. \n   -- Example 3:\n   -- Input: []\n   -- Output: []\n   -- Example 4:\n   -- Input: [5, 0, 3, 0, 4, 2]\n   -- Output: [0, 1]\n   -- Explanation: 0 is the smallest value, but  there are two zeros,\n   -- so we will choose the first zero, which has the smallest index.\n   -- Constraints:\n   -- * 1 <= nodes.length <= 10000\n   -- * 0 <= node.value\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Pluck (Arr : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_68_pluck.py", "prompt_terminology": "verbatim", "tests": "\n   end Pluck;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer_Array renames Placeholder.Pluck;\n\nbegin\n   pragma Assert (Candidate ((4, 2, 3)) = (2, 1));\n   pragma Assert (Candidate ((1, 2, 3)) = (2, 1));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((5, 0, 3, 0, 4, 2)) = (0, 1));\n   pragma Assert (Candidate ((1, 2, 3, 0, 5, 3)) = (0, 3));\n   pragma Assert (Candidate ((5, 4, 8, 4, 8)) = (4, 1));\n   pragma Assert (Candidate ((7, 6, 7, 1)) = (6, 1));\n   pragma Assert (Candidate ((7, 9, 7, 1)) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_69_search", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Search (Lst : Integer_Array) return Integer;\n   -- You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n   -- zero, and has a frequency greater than or equal to the value of the integer itself. \n   -- The frequency of an integer is the number of times it appears in the list.\n   -- If no such a value exist, return -1.\n   -- Examples:\n   -- search([4, 1, 2, 2, 3, 1]) == 2\n   -- search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n   -- search([5, 5, 4, 4, 4]) == -1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Search (Lst : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_69_search.py", "prompt_terminology": "verbatim", "tests": "\n   end Search;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Search;\n\nbegin\n   pragma Assert (Candidate ((5, 5, 5, 5, 1)) = 1);\n   pragma Assert (Candidate ((4, 1, 4, 1, 4, 4)) = 4);\n   pragma Assert (Candidate ((3, 3)) = -1);\n   pragma Assert (Candidate ((8, 8, 8, 8, 8, 8, 8, 8)) = 8);\n   pragma Assert (Candidate ((2, 3, 3, 2, 2)) = 2);\n   pragma Assert (Candidate ((2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) = 1);\n   pragma Assert (Candidate ((3, 2, 8, 2)) = 2);\n   pragma Assert (Candidate ((6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)) = 1);\n   pragma Assert (Candidate ((8, 8, 3, 6, 5, 6, 4)) = -1);\n   pragma Assert (Candidate ((6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) = 1);\n   pragma Assert (Candidate ((1, 9, 10, 1, 3)) = 1);\n   pragma Assert (Candidate ((6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) = 5);\n   pragma Assert (Candidate ((0 => 1)) = 1);\n   pragma Assert (Candidate ((8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5)) = 4);\n   pragma Assert (Candidate ((2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10)) = 2);\n   pragma Assert (Candidate ((1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) = 1);\n   pragma Assert (Candidate ((9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) = 4);\n   pragma Assert (Candidate ((2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) = 4);\n   pragma Assert (Candidate ((9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1)) = 2);\n   pragma Assert (Candidate ((5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) = -1);\n   pragma Assert (Candidate ((0 => 10)) = -1);\n   pragma Assert (Candidate ((9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2)) = 2);\n   pragma Assert (Candidate ((5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) = 1);\n   pragma Assert (Candidate ((7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) = 1);\n   pragma Assert (Candidate ((3, 10, 10, 9, 2)) = -1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_6_parse_nested_parens", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Parse_Nested_Parens (Paren_String : String) return Integer_Array;\n   -- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n   -- For each of the group, output the deepest level of nesting of parentheses.\n   -- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n   -- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n   -- [2, 3, 1, 3]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Parse_Nested_Parens (Paren_String : String) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "verbatim", "tests": "\n   end Parse_Nested_Parens;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Paren_String : String) return Integer_Array renames Placeholder.Parse_Nested_Parens;\n\nbegin\n   pragma Assert (Candidate (\"(()()) ((())) () ((())()())\") = (2, 3, 1, 3));\n   pragma Assert (Candidate (\"() (()) ((())) (((())))\") = (1, 2, 3, 4));\n   pragma Assert (Candidate (\"(()(())((())))\") = (0 => 4));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_70_strange_sort_list", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Strange_Sort_List (Lst : Integer_Array) return Integer_Array;\n   -- Given list of integers, return list in strange order.\n   -- Strange sorting, is when you start with the minimum value,\n   -- then maximum of the remaining integers, then minimum and so on.\n   -- Examples:\n   -- strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n   -- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n   -- strange_sort_list([]) == []\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Strange_Sort_List (Lst : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py", "prompt_terminology": "verbatim", "tests": "\n   end Strange_Sort_List;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer_Array renames Placeholder.Strange_Sort_List;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3, 4)) = (1, 4, 2, 3));\n   pragma Assert (Candidate ((5, 6, 7, 8, 9)) = (5, 9, 6, 8, 7));\n   pragma Assert (Candidate ((1, 2, 3, 4, 5)) = (1, 5, 2, 4, 3));\n   pragma Assert (Candidate ((5, 6, 7, 8, 9, 1)) = (1, 9, 5, 8, 6, 7));\n   pragma Assert (Candidate ((5, 5, 5, 5)) = (5, 5, 5, 5));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1, 2, 3, 4, 5, 6, 7, 8)) = (1, 8, 2, 7, 3, 6, 4, 5));\n   pragma Assert (Candidate ((0, 2, 2, 2, 5, 5, -5, -5)) = (-5, 5, -5, 5, 0, 2, 2, 2));\n   pragma Assert (Candidate ((0 => 111111)) = (0 => 111111));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_71_triangle_area", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Triangle_Area (A : Integer; B : Integer; C : Integer) return Float;\n   -- Given the lengths of the three sides of a triangle. Return the area of\n   -- the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n   -- Otherwise return -1\n   -- Three sides make a valid triangle when the sum of any two sides is greater \n   -- than the third side.\n   -- Example:\n   -- triangle_area(3, 4, 5) == 6.00\n   -- triangle_area(1, 2, 10) == -1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Triangle_Area (A : Integer; B : Integer; C : Integer) return Float", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_71_triangle_area.py", "prompt_terminology": "verbatim", "tests": "\n   end Triangle_Area;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; B : Integer; C : Integer) return Float renames Placeholder.Triangle_Area;\n\nbegin\n   pragma Assert (Candidate (3, 4, 5) = 6.0);\n   pragma Assert (Candidate (1, 2, 10) = -1);\n   pragma Assert (Candidate (4, 8, 5) = 8.18);\n   pragma Assert (Candidate (2, 2, 2) = 1.73);\n   pragma Assert (Candidate (1, 2, 3) = -1);\n   pragma Assert (Candidate (10, 5, 7) = 16.25);\n   pragma Assert (Candidate (2, 6, 3) = -1);\n   pragma Assert (Candidate (1, 1, 1) = 0.43);\n   pragma Assert (Candidate (2, 2, 10) = -1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_72_will_it_fly", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Will_It_Fly (Q : Integer_Array; W : Integer) return Boolean;\n   -- Write a function that returns True if the object q will fly, and False otherwise.\n   -- The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n   -- Example:\n   -- will_it_fly([1, 2], 5) \u279e False \n   -- # 1+2 is less than the maximum possible weight, but it's unbalanced.\n   -- will_it_fly([3, 2, 3], 1) \u279e False\n   -- # it's balanced, but 3+2+3 is more than the maximum possible weight.\n   -- will_it_fly([3, 2, 3], 9) \u279e True\n   -- # 3+2+3 is less than the maximum possible weight, and it's balanced.\n   -- will_it_fly([3], 5) \u279e True\n   -- # 3 is less than the maximum possible weight, and it's balanced.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Will_It_Fly (Q : Integer_Array; W : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_72_will_it_fly.py", "prompt_terminology": "verbatim", "tests": "\n   end Will_It_Fly;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Q : Integer_Array; W : Integer) return Boolean renames Placeholder.Will_It_Fly;\n\nbegin\n   pragma Assert (Candidate ((3, 2, 3), 9) = True);\n   pragma Assert (Candidate ((1, 2), 5) = False);\n   pragma Assert (Candidate ((0 => 3), 5) = True);\n   pragma Assert (Candidate ((3, 2, 3), 1) = False);\n   pragma Assert (Candidate ((1, 2, 3), 6) = False);\n   pragma Assert (Candidate ((0 => 5), 5) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_73_smallest_change", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Smallest_Change (Arr : Integer_Array) return Integer;\n   -- Given an array arr of integers, find the minimum number of elements that\n   -- need to be changed to make the array palindromic. A palindromic array is an array that\n   -- is read the same backwards and forwards. In one change, you can change one element to any other element.\n   -- For example:\n   -- smallest_change([1,2,3,5,4,7,9,6]) == 4\n   -- smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n   -- smallest_change([1, 2, 3, 2, 1]) == 0\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Smallest_Change (Arr : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_73_smallest_change.py", "prompt_terminology": "verbatim", "tests": "\n   end Smallest_Change;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Arr : Integer_Array) return Integer renames Placeholder.Smallest_Change;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3, 5, 4, 7, 9, 6)) = 4);\n   pragma Assert (Candidate ((1, 2, 3, 4, 3, 2, 2)) = 1);\n   pragma Assert (Candidate ((1, 4, 2)) = 1);\n   pragma Assert (Candidate ((1, 4, 4, 2)) = 1);\n   pragma Assert (Candidate ((1, 2, 3, 2, 1)) = 0);\n   pragma Assert (Candidate ((3, 1, 1, 3)) = 0);\n   pragma Assert (Candidate ((0 => 1)) = 0);\n   pragma Assert (Candidate ((0, 1)) = 1);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_74_total_match", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Total_Match (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array;\n   -- Write a function that accepts two lists of strings and returns the list that has \n   -- total number of chars in the all strings of the list less than the other list.\n   -- if the two lists have the same number of chars, return the first list.\n   -- Examples\n   -- total_match([], []) \u279e []\n   -- total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n   -- total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n   -- total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n   -- total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Total_Match (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_74_total_match.py", "prompt_terminology": "verbatim", "tests": "\n   end Total_Match;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst1 : Unbounded_String_Array; Lst2 : Unbounded_String_Array) return Unbounded_String_Array renames Placeholder.Total_Match;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>), (1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")), (To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\"))) = (To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")), (To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\"), To_Unbounded_String (\"project\"))) = (To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")));\n   pragma Assert (Candidate ((0 => To_Unbounded_String (\"4\")), (To_Unbounded_String (\"1\"), To_Unbounded_String (\"2\"), To_Unbounded_String (\"3\"), To_Unbounded_String (\"4\"), To_Unbounded_String (\"5\"))) = (0 => To_Unbounded_String (\"4\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")), (To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\"))) = (To_Unbounded_String (\"hI\"), To_Unbounded_String (\"Hi\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")), (To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\"))) = (To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hi\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")), (To_Unbounded_String (\"hI\"), To_Unbounded_String (\"hi\"), To_Unbounded_String (\"hii\"))) = (To_Unbounded_String (\"hi\"), To_Unbounded_String (\"admin\")));\n   pragma Assert (Candidate ((1 .. 0 => <>), (0 => To_Unbounded_String (\"this\"))) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((0 => To_Unbounded_String (\"this\")), (1 .. 0 => <>)) = (1 .. 0 => <>));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_75_is_multiply_prime", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Multiply_Prime (A : Integer) return Boolean;\n   -- Write a function that returns true if the given number is the multiplication of 3 prime numbers\n   -- and false otherwise.\n   -- Knowing that (a) is less then 100. \n   -- Example:\n   -- is_multiply_prime(30) == True\n   -- 30 = 2 * 3 * 5\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Multiply_Prime (A : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Multiply_Prime;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer) return Boolean renames Placeholder.Is_Multiply_Prime;\n\nbegin\n   pragma Assert (Candidate (5) = False);\n   pragma Assert (Candidate (30) = True);\n   pragma Assert (Candidate (8) = True);\n   pragma Assert (Candidate (10) = False);\n   pragma Assert (Candidate (125) = True);\n   pragma Assert (Candidate (105) = True);\n   pragma Assert (Candidate (126) = False);\n   pragma Assert (Candidate (729) = False);\n   pragma Assert (Candidate (891) = False);\n   pragma Assert (Candidate (1001) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_76_is_simple_power", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Simple_Power (X : Integer; N : Integer) return Boolean;\n   -- Your task is to write a function that returns true if a number x is a simple\n   -- power of n and false in other cases.\n   -- x is a simple power of n if n**int=x\n   -- For example:\n   -- is_simple_power(1, 4) => true\n   -- is_simple_power(2, 2) => true\n   -- is_simple_power(8, 2) => true\n   -- is_simple_power(3, 2) => false\n   -- is_simple_power(3, 1) => false\n   -- is_simple_power(5, 3) => false\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Simple_Power (X : Integer; N : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_76_is_simple_power.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Simple_Power;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Integer; N : Integer) return Boolean renames Placeholder.Is_Simple_Power;\n\nbegin\n   pragma Assert (Candidate (16, 2) = True);\n   pragma Assert (Candidate (143214, 16) = False);\n   pragma Assert (Candidate (4, 2) = True);\n   pragma Assert (Candidate (9, 3) = True);\n   pragma Assert (Candidate (16, 4) = True);\n   pragma Assert (Candidate (24, 2) = False);\n   pragma Assert (Candidate (128, 4) = False);\n   pragma Assert (Candidate (12, 6) = False);\n   pragma Assert (Candidate (1, 1) = True);\n   pragma Assert (Candidate (1, 12) = True);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_77_iscube", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Iscube (A : Integer) return Boolean;\n   -- Write a function that takes an integer a and returns True \n   -- if this ingeger is a cube of some integer number.\n   -- Note: you may assume the input is always valid.\n   -- Examples:\n   -- iscube(1) ==> True\n   -- iscube(2) ==> False\n   -- iscube(-1) ==> True\n   -- iscube(64) ==> True\n   -- iscube(0) ==> True\n   -- iscube(180) ==> False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Iscube (A : Integer) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_77_iscube.py", "prompt_terminology": "verbatim", "tests": "\n   end Iscube;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer) return Boolean renames Placeholder.Iscube;\n\nbegin\n   pragma Assert (Candidate (1) = True);\n   pragma Assert (Candidate (2) = False);\n   pragma Assert (Candidate (-1) = True);\n   pragma Assert (Candidate (64) = True);\n   pragma Assert (Candidate (180) = False);\n   pragma Assert (Candidate (1000) = True);\n   pragma Assert (Candidate (0) = True);\n   pragma Assert (Candidate (1729) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_78_hex_key", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Hex_Key (Num : String) return Integer;\n   -- You have been tasked to write a function that receives \n   -- a hexadecimal number as a string and counts the number of hexadecimal \n   -- digits that are primes (prime number, or a prime, is a natural number \n   -- greater than 1 that is not a product of two smaller natural numbers).\n   -- Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n   -- Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n   -- So you have to determine a number of the following digits: 2, 3, 5, 7, \n   -- B (=decimal 11), D (=decimal 13).\n   -- Note: you may assume the input is always correct or empty string, \n   -- and symbols A,B,C,D,E,F are always uppercase.\n   -- Examples:\n   -- For num = \"AB\" the output should be 1.\n   -- For num = \"1077E\" the output should be 2.\n   -- For num = \"ABED1A33\" the output should be 4.\n   -- For num = \"123456789ABCDEF0\" the output should be 6.\n   -- For num = \"2020\" the output should be 2.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Hex_Key (Num : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_78_hex_key.py", "prompt_terminology": "verbatim", "tests": "\n   end Hex_Key;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Num : String) return Integer renames Placeholder.Hex_Key;\n\nbegin\n   pragma Assert (Candidate (\"AB\") = 1);\n   pragma Assert (Candidate (\"1077E\") = 2);\n   pragma Assert (Candidate (\"ABED1A33\") = 4);\n   pragma Assert (Candidate (\"2020\") = 2);\n   pragma Assert (Candidate (\"123456789ABCDEF0\") = 6);\n   pragma Assert (Candidate (\"112233445566778899AABBCCDDEEFF00\") = 12);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_79_decimal_to_binary", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Decimal_To_Binary (Decimal : Integer) return String;\n   -- You will be given a number in decimal form and your task is to convert it to\n   -- binary format. The function should return a string, with each character representing a binary\n   -- number. Each character in the string will be '0' or '1'.\n   -- There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n   -- The extra characters are there to help with the format.\n   -- Examples:\n   -- decimal_to_binary(15)   # returns \"db1111db\"\n   -- decimal_to_binary(32)   # returns \"db100000db\"\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Decimal_To_Binary (Decimal : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "\n   end Decimal_To_Binary;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Decimal : Integer) return String renames Placeholder.Decimal_To_Binary;\n\nbegin\n   pragma Assert (Candidate (0) = \"db0db\");\n   pragma Assert (Candidate (32) = \"db100000db\");\n   pragma Assert (Candidate (103) = \"db1100111db\");\n   pragma Assert (Candidate (15) = \"db1111db\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_7_filter_by_substring", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Filter_By_Substring (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array;\n   -- Filter an input list of strings only for ones that contain given substring\n   -- >>> filter_by_substring([], 'a')\n   -- []\n   -- >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n   -- ['abc', 'bacd', 'array']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Filter_By_Substring (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py", "prompt_terminology": "verbatim", "tests": "\n   end Filter_By_Substring;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Strings : Unbounded_String_Array; Substring : String) return Unbounded_String_Array renames Placeholder.Filter_By_Substring;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>), \"john\") = (1 .. 0 => <>));\n   pragma Assert (Candidate ((To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"xxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")), \"xxx\") = (To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"asd\"), To_Unbounded_String (\"aaaxxy\"), To_Unbounded_String (\"john doe\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")), \"xx\") = (To_Unbounded_String (\"xxx\"), To_Unbounded_String (\"aaaxxy\"), To_Unbounded_String (\"xxxAAA\"), To_Unbounded_String (\"xxx\")));\n   pragma Assert (Candidate ((To_Unbounded_String (\"grunt\"), To_Unbounded_String (\"trumpet\"), To_Unbounded_String (\"prune\"), To_Unbounded_String (\"gruesome\")), \"run\") = (To_Unbounded_String (\"grunt\"), To_Unbounded_String (\"prune\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_80_is_happy", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Happy (S : String) return Boolean;\n   -- You are given a string s.\n   -- Your task is to check if the string is happy or not.\n   -- A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n   -- For example:\n   -- is_happy(a) => False\n   -- is_happy(aa) => False\n   -- is_happy(abcd) => True\n   -- is_happy(aabb) => False\n   -- is_happy(adb) => True\n   -- is_happy(xyy) => False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Happy (S : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_80_is_happy.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Happy;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Boolean renames Placeholder.Is_Happy;\n\nbegin\n   pragma Assert (Candidate (\"a\") = False);\n   pragma Assert (Candidate (\"aa\") = False);\n   pragma Assert (Candidate (\"abcd\") = True);\n   pragma Assert (Candidate (\"aabb\") = False);\n   pragma Assert (Candidate (\"adb\") = True);\n   pragma Assert (Candidate (\"xyy\") = False);\n   pragma Assert (Candidate (\"iopaxpoi\") = True);\n   pragma Assert (Candidate (\"iopaxioi\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_81_numerical_letter_grade", "language": "adb", "prompt": "pragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage Placeholder is\n   type Float_Array is array (Integer range <>) of Float;\n   type Unbounded_String_Array is array (Integer range <>) of Unbounded_String;\n   function Numerical_Letter_Grade (Grades : Float_Array) return Unbounded_String_Array;\n   -- It is the last week of the semester and the teacher has to give the grades\n   -- to students. The teacher has been making her own algorithm for grading.\n   -- The only problem is, she has lost the code she used for grading.\n   -- She has given you a list of GPAs for some students and you have to write \n   -- a function that can output a list of letter grades using the following table:\n   -- GPA       |    Letter grade\n   -- 4.0                A+\n   -- > 3.7                A \n   -- > 3.3                A- \n   -- > 3.0                B+\n   -- > 2.7                B \n   -- > 2.3                B-\n   -- > 2.0                C+\n   -- > 1.7                C\n   -- > 1.3                C-\n   -- > 1.0                D+ \n   -- > 0.7                D \n   -- > 0.0                D-\n   -- 0.0                E\n   -- Example:\n   -- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n\npackage body Placeholder is\n   function Numerical_Letter_Grade (Grades : Float_Array) return Unbounded_String_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "verbatim", "tests": "\n   end Numerical_Letter_Grade;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Grades : Float_Array) return Unbounded_String_Array renames Placeholder.Numerical_Letter_Grade;\n\nbegin\n   pragma Assert (Candidate ((4.0, 3, 1.7, 2, 3.5)) = (To_Unbounded_String (\"A+\"), To_Unbounded_String (\"B\"), To_Unbounded_String (\"C-\"), To_Unbounded_String (\"C\"), To_Unbounded_String (\"A-\")));\n   pragma Assert (Candidate ((0 => 1.2)) = (0 => To_Unbounded_String (\"D+\")));\n   pragma Assert (Candidate ((0 => 0.5)) = (0 => To_Unbounded_String (\"D-\")));\n   pragma Assert (Candidate ((0 => 0.0)) = (0 => To_Unbounded_String (\"E\")));\n   pragma Assert (Candidate ((1.0, 0.3, 1.5, 2.8, 3.3)) = (To_Unbounded_String (\"D\"), To_Unbounded_String (\"D-\"), To_Unbounded_String (\"C-\"), To_Unbounded_String (\"B\"), To_Unbounded_String (\"B+\")));\n   pragma Assert (Candidate ((0.0, 0.7)) = (To_Unbounded_String (\"E\"), To_Unbounded_String (\"D-\")));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_82_prime_length", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Prime_Length (My_String : String) return Boolean;\n   -- Write a function that takes a string and returns True if the string\n   -- length is a prime number or False otherwise\n   -- Examples\n   -- prime_length('Hello') == True\n   -- prime_length('abcdcba') == True\n   -- prime_length('kittens') == True\n   -- prime_length('orange') == False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Prime_Length (My_String : String) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_82_prime_length.py", "prompt_terminology": "verbatim", "tests": "\n   end Prime_Length;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_String : String) return Boolean renames Placeholder.Prime_Length;\n\nbegin\n   pragma Assert (Candidate (\"Hello\") = True);\n   pragma Assert (Candidate (\"abcdcba\") = True);\n   pragma Assert (Candidate (\"kittens\") = True);\n   pragma Assert (Candidate (\"orange\") = False);\n   pragma Assert (Candidate (\"wow\") = True);\n   pragma Assert (Candidate (\"world\") = True);\n   pragma Assert (Candidate (\"MadaM\") = True);\n   pragma Assert (Candidate (\"Wow\") = True);\n   pragma Assert (Candidate (\"\") = False);\n   pragma Assert (Candidate (\"HI\") = True);\n   pragma Assert (Candidate (\"go\") = True);\n   pragma Assert (Candidate (\"gogo\") = False);\n   pragma Assert (Candidate (\"aaaaaaaaaaaaaaa\") = False);\n   pragma Assert (Candidate (\"Madam\") = True);\n   pragma Assert (Candidate (\"M\") = False);\n   pragma Assert (Candidate (\"0\") = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_83_starts_one_ends", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Starts_One_Ends (N : Integer) return Integer;\n   -- Given a positive integer n, return the count of the numbers of n-digit\n   -- positive integers that start or end with 1.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Starts_One_Ends (N : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py", "prompt_terminology": "verbatim", "tests": "\n   end Starts_One_Ends;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer renames Placeholder.Starts_One_Ends;\n\nbegin\n   pragma Assert (Candidate (1) = 1);\n   pragma Assert (Candidate (2) = 18);\n   pragma Assert (Candidate (3) = 180);\n   pragma Assert (Candidate (4) = 1800);\n   pragma Assert (Candidate (5) = 18000);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_84_solve", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Solve (N : Integer) return String;\n   -- Given a positive integer N, return the total sum of its digits in binary.\n   -- Example\n   -- For N = 1000, the sum of digits will be 1 the output should be \"1\".\n   -- For N = 150, the sum of digits will be 6 the output should be \"110\".\n   -- For N = 147, the sum of digits will be 12 the output should be \"1100\".\n   -- Variables:\n   -- @N integer\n   -- Constraints: 0 \u2264 N \u2264 10000.\n   -- Output:\n   -- a string of binary number\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Solve (N : Integer) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_84_solve.py", "prompt_terminology": "verbatim", "tests": "\n   end Solve;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return String renames Placeholder.Solve;\n\nbegin\n   pragma Assert (Candidate (1000) = \"1\");\n   pragma Assert (Candidate (150) = \"110\");\n   pragma Assert (Candidate (147) = \"1100\");\n   pragma Assert (Candidate (333) = \"1001\");\n   pragma Assert (Candidate (963) = \"10010\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_85_add", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Add (Lst : Integer_Array) return Integer;\n   -- Given a non-empty list of integers lst. add the even elements that are at odd indices..\n   -- Examples:\n   -- add([4, 2, 6, 7]) ==> 2\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Add (Lst : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_85_add.py", "prompt_terminology": "verbatim", "tests": "\n   end Add;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Add;\n\nbegin\n   pragma Assert (Candidate ((4, 88)) = 88);\n   pragma Assert (Candidate ((4, 5, 6, 7, 2, 122)) = 122);\n   pragma Assert (Candidate ((4, 0, 6, 7)) = 0);\n   pragma Assert (Candidate ((4, 4, 6, 8)) = 12);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_86_anti_shuffle", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Anti_Shuffle (S : String) return String;\n   -- Write a function that takes a string and returns an ordered version of it.\n   -- Ordered version of string, is a string where all words (separated by space)\n   -- are replaced by a new word where all the characters arranged in\n   -- ascending order based on ascii value.\n   -- Note: You should keep the order of words and blank spaces in the sentence.\n   -- For example:\n   -- anti_shuffle('Hi') returns 'Hi'\n   -- anti_shuffle('hello') returns 'ehllo'\n   -- anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Anti_Shuffle (S : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py", "prompt_terminology": "verbatim", "tests": "\n   end Anti_Shuffle;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return String renames Placeholder.Anti_Shuffle;\n\nbegin\n   pragma Assert (Candidate (\"Hi\") = \"Hi\");\n   pragma Assert (Candidate (\"hello\") = \"ehllo\");\n   pragma Assert (Candidate (\"number\") = \"bemnru\");\n   pragma Assert (Candidate (\"abcd\") = \"abcd\");\n   pragma Assert (Candidate (\"Hello World!!!\") = \"Hello !!!Wdlor\");\n   pragma Assert (Candidate (\"\") = \"\");\n   pragma Assert (Candidate (\"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_88_sort_array", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Sort_Array (My_Array : Integer_Array) return Integer_Array;\n   -- Given an array of non-negative integers, return a copy of the given array after sorting,\n   -- you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n   -- or sort it in descending order if the sum( first index value, last index value) is even.\n   -- Note:\n   -- * don't change the given array.\n   -- Examples:\n   -- * sort_array([]) => []\n   -- * sort_array([5]) => [5]\n   -- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n   -- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sort_Array (My_Array : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_88_sort_array.py", "prompt_terminology": "verbatim", "tests": "\n   end Sort_Array;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (My_Array : Integer_Array) return Integer_Array renames Placeholder.Sort_Array;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((0 => 5)) = (0 => 5));\n   pragma Assert (Candidate ((2, 4, 3, 0, 1, 5)) = (0, 1, 2, 3, 4, 5));\n   pragma Assert (Candidate ((2, 4, 3, 0, 1, 5, 6)) = (6, 5, 4, 3, 2, 1, 0));\n   pragma Assert (Candidate ((2, 1)) = (1, 2));\n   pragma Assert (Candidate ((15, 42, 87, 32, 11, 0)) = (0, 11, 15, 32, 42, 87));\n   pragma Assert (Candidate ((21, 14, 23, 11)) = (23, 21, 14, 11));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_89_encrypt", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Encrypt (S : String) return String;\n   -- Create a function encrypt that takes a string as an argument and\n   -- returns a string encrypted with the alphabet being rotated. \n   -- The alphabet should be rotated in a manner such that the letters \n   -- shift down by two multiplied to two places.\n   -- For example:\n   -- encrypt('hi') returns 'lm'\n   -- encrypt('asdfghjkl') returns 'ewhjklnop'\n   -- encrypt('gf') returns 'kj'\n   -- encrypt('et') returns 'ix'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Encrypt (S : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_89_encrypt.py", "prompt_terminology": "verbatim", "tests": "\n   end Encrypt;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return String renames Placeholder.Encrypt;\n\nbegin\n   pragma Assert (Candidate (\"hi\") = \"lm\");\n   pragma Assert (Candidate (\"asdfghjkl\") = \"ewhjklnop\");\n   pragma Assert (Candidate (\"gf\") = \"kj\");\n   pragma Assert (Candidate (\"et\") = \"ix\");\n   pragma Assert (Candidate (\"faewfawefaewg\") = \"jeiajeaijeiak\");\n   pragma Assert (Candidate (\"hellomyfriend\") = \"lippsqcjvmirh\");\n   pragma Assert (Candidate (\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n   pragma Assert (Candidate (\"a\") = \"e\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_8_sum_product", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   type Integer_Integer_Tuple is record\n     Integer_1 : Integer;\n     Integer_2 : Integer;\n   end record;\n\n   function Sum_Product (Numbers : Integer_Array) return Integer_Integer_Tuple;\n   -- For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   -- Empty sum should be equal to 0 and empty product should be equal to 1.\n   -- >>> sum_product([])\n   -- (0, 1)\n   -- >>> sum_product([1, 2, 3, 4])\n   -- (10, 24)\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Sum_Product (Numbers : Integer_Array) return Integer_Integer_Tuple", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_8_sum_product.py", "prompt_terminology": "verbatim", "tests": "\n   end Sum_Product;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Integer_Array) return Integer_Integer_Tuple renames Placeholder.Sum_Product;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (0, 1));\n   pragma Assert (Candidate ((1, 1, 1)) = (3, 1));\n   pragma Assert (Candidate ((100, 0)) = (100, 0));\n   pragma Assert (Candidate ((3, 5, 7)) = (15, 105));\n   pragma Assert (Candidate ((0 => 10)) = (10, 10));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_90_next_smallest", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   type Integer_Option (Valid : Boolean := False) is record\n   case Valid is\n      when True =>\n         Value : Integer;\n      when False =>\n         null;\n   end case;\nend record;\n   function Next_Smallest (Lst : Integer_Array) return Integer_Option;\n   -- You are given a list of integers.\n   -- Write a function next_smallest() that returns the 2nd smallest element of the list.\n   -- Return None if there is no such element.\n   -- next_smallest([1, 2, 3, 4, 5]) == 2\n   -- next_smallest([5, 1, 4, 3, 2]) == 2\n   -- next_smallest([]) == None\n   -- next_smallest([1, 1]) == None\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Next_Smallest (Lst : Integer_Array) return Integer_Option", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_90_next_smallest.py", "prompt_terminology": "verbatim", "tests": "\n   end Next_Smallest;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer_Option renames Placeholder.Next_Smallest;\n\nbegin\n   pragma Assert (Candidate ((1, 2, 3, 4, 5)) = (Valid => True, Value => 2));\n   pragma Assert (Candidate ((5, 1, 4, 3, 2)) = (Valid => True, Value => 2));\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (Valid => False));\n   pragma Assert (Candidate ((1, 1)) = (Valid => False));\n   pragma Assert (Candidate ((1, 1, 1, 1, 0)) = (Valid => True, Value => 1));\n   pragma Assert (Candidate ((1, 1)) = (Valid => False));\n   pragma Assert (Candidate ((-35, 34, 12, -45)) = (Valid => True, Value => -35));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_91_is_bored", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Is_Bored (S : String) return Integer;\n   -- You'll be given a string of words, and your task is to count the number\n   -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n   -- Sentences are delimited by '.', '?' or '!'.\n   -- For example:\n   -- >>> is_bored(\"Hello world\")\n   -- 0\n   -- >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   -- 1\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Is_Bored (S : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_91_is_bored.py", "prompt_terminology": "verbatim", "tests": "\n   end Is_Bored;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Integer renames Placeholder.Is_Bored;\n\nbegin\n   pragma Assert (Candidate (\"Hello world\") = 0);\n   pragma Assert (Candidate (\"Is the sky blue?\") = 0);\n   pragma Assert (Candidate (\"I love It !\") = 1);\n   pragma Assert (Candidate (\"bIt\") = 0);\n   pragma Assert (Candidate (\"I feel good today. I will be productive. will kill It\") = 2);\n   pragma Assert (Candidate (\"You and I are going for a walk\") = 0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_92_any_int", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Any_Int (X : Float; Y : Float; Z : Float) return Boolean;\n   -- Create a function that takes 3 numbers.\n   -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n   -- Returns false in any other cases.\n   -- Examples\n   -- any_int(5, 2, 7) \u279e True\n   -- any_int(3, 2, 2) \u279e False\n   -- any_int(3, -2, 1) \u279e True\n   -- any_int(3.6, -2.2, 2) \u279e False\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Any_Int (X : Float; Y : Float; Z : Float) return Boolean", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_92_any_int.py", "prompt_terminology": "verbatim", "tests": "\n   end Any_Int;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (X : Float; Y : Float; Z : Float) return Boolean renames Placeholder.Any_Int;\n\nbegin\n   pragma Assert (Candidate (2, 3, 1) = True);\n   pragma Assert (Candidate (2.5, 2, 3) = False);\n   pragma Assert (Candidate (1.5, 5, 3.5) = False);\n   pragma Assert (Candidate (2, 6, 2) = False);\n   pragma Assert (Candidate (4, 2, 2) = True);\n   pragma Assert (Candidate (2.2, 2.2, 2.2) = False);\n   pragma Assert (Candidate (-4, 6, 2) = True);\n   pragma Assert (Candidate (2, 1, 1) = True);\n   pragma Assert (Candidate (3, 4, 7) = True);\n   pragma Assert (Candidate (3.0, 4, 7) = False);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_93_encode", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Encode (Message : String) return String;\n   -- Write a function that takes a message, and encodes in such a \n   -- way that it swaps case of all letters, replaces all vowels in \n   -- the message with the letter that appears 2 places ahead of that \n   -- vowel in the english alphabet. \n   -- Assume only letters. \n   -- Examples:\n   -- >>> encode('test')\n   -- 'TGST'\n   -- >>> encode('This is a message')\n   -- 'tHKS KS C MGSSCGG'\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Encode (Message : String) return String", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_93_encode.py", "prompt_terminology": "verbatim", "tests": "\n   end Encode;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Message : String) return String renames Placeholder.Encode;\n\nbegin\n   pragma Assert (Candidate (\"TEST\") = \"tgst\");\n   pragma Assert (Candidate (\"Mudasir\") = \"mWDCSKR\");\n   pragma Assert (Candidate (\"YES\") = \"ygs\");\n   pragma Assert (Candidate (\"This is a message\") = \"tHKS KS C MGSSCGG\");\n   pragma Assert (Candidate (\"I DoNt KnOw WhAt tO WrItE\") = \"k dQnT kNqW wHcT Tq wRkTg\");\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_94_skjkasdkd", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Skjkasdkd (Lst : Integer_Array) return Integer;\n   -- You are given a list of integers.\n   -- You need to find the largest prime value and return the sum of its digits.\n   -- Examples:\n   -- For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n   -- For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n   -- For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n   -- For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n   -- For lst = [0,81,12,3,1,21] the output should be 3\n   -- For lst = [0,8,1,2,1,7] the output should be 7\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Skjkasdkd (Lst : Integer_Array) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py", "prompt_terminology": "verbatim", "tests": "\n   end Skjkasdkd;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Lst : Integer_Array) return Integer renames Placeholder.Skjkasdkd;\n\nbegin\n   pragma Assert (Candidate ((0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) = 10);\n   pragma Assert (Candidate ((1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) = 25);\n   pragma Assert (Candidate ((1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) = 13);\n   pragma Assert (Candidate ((0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) = 11);\n   pragma Assert (Candidate ((0, 81, 12, 3, 1, 21)) = 3);\n   pragma Assert (Candidate ((0, 8, 1, 2, 1, 7)) = 7);\n   pragma Assert (Candidate ((0 => 8191)) = 19);\n   pragma Assert (Candidate ((8191, 123456, 127, 7)) = 19);\n   pragma Assert (Candidate ((127, 97, 8192)) = 10);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_96_count_up_to", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Count_Up_To (N : Integer) return Integer_Array;\n   -- Implement a function that takes an non-negative integer and returns an array of the first n\n   -- integers that are prime numbers and less than n.\n   -- for example:\n   -- count_up_to(5) => [2,3]\n   -- count_up_to(11) => [2,3,5,7]\n   -- count_up_to(0) => []\n   -- count_up_to(20) => [2,3,5,7,11,13,17,19]\n   -- count_up_to(1) => []\n   -- count_up_to(18) => [2,3,5,7,11,13,17]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Count_Up_To (N : Integer) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_96_count_up_to.py", "prompt_terminology": "verbatim", "tests": "\n   end Count_Up_To;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (N : Integer) return Integer_Array renames Placeholder.Count_Up_To;\n\nbegin\n   pragma Assert (Candidate (5) = (2, 3));\n   pragma Assert (Candidate (6) = (2, 3, 5));\n   pragma Assert (Candidate (7) = (2, 3, 5));\n   pragma Assert (Candidate (10) = (2, 3, 5, 7));\n   pragma Assert (Candidate (0) = (1 .. 0 => <>));\n   pragma Assert (Candidate (22) = (2, 3, 5, 7, 11, 13, 17, 19));\n   pragma Assert (Candidate (1) = (1 .. 0 => <>));\n   pragma Assert (Candidate (18) = (2, 3, 5, 7, 11, 13, 17));\n   pragma Assert (Candidate (47) = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43));\n   pragma Assert (Candidate (101) = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97));\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_97_multiply", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Multiply (A : Integer; B : Integer) return Integer;\n   -- Complete the function that takes two integers and returns \n   -- the product of their unit digits.\n   -- Assume the input is always valid.\n   -- Examples:\n   -- multiply(148, 412) should return 16.\n   -- multiply(19, 28) should return 72.\n   -- multiply(2020, 1851) should return 0.\n   -- multiply(14,-15) should return 20.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Multiply (A : Integer; B : Integer) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_97_multiply.py", "prompt_terminology": "verbatim", "tests": "\n   end Multiply;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (A : Integer; B : Integer) return Integer renames Placeholder.Multiply;\n\nbegin\n   pragma Assert (Candidate (148, 412) = 16);\n   pragma Assert (Candidate (19, 28) = 72);\n   pragma Assert (Candidate (2020, 1851) = 0);\n   pragma Assert (Candidate (14, -15) = 20);\n   pragma Assert (Candidate (76, 67) = 42);\n   pragma Assert (Candidate (17, 27) = 49);\n   pragma Assert (Candidate (0, 1) = 0);\n   pragma Assert (Candidate (0, 0) = 0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_98_count_upper", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Count_Upper (S : String) return Integer;\n   -- Given a string s, count the number of uppercase vowels in even indices.\n   -- For example:\n   -- count_upper('aBCdEf') returns 1\n   -- count_upper('abcdefg') returns 0\n   -- count_upper('dBBE') returns 0\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Count_Upper (S : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_98_count_upper.py", "prompt_terminology": "verbatim", "tests": "\n   end Count_Upper;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (S : String) return Integer renames Placeholder.Count_Upper;\n\nbegin\n   pragma Assert (Candidate (\"aBCdEf\") = 1);\n   pragma Assert (Candidate (\"abcdefg\") = 0);\n   pragma Assert (Candidate (\"dBBE\") = 0);\n   pragma Assert (Candidate (\"B\") = 0);\n   pragma Assert (Candidate (\"U\") = 1);\n   pragma Assert (Candidate (\"\") = 0);\n   pragma Assert (Candidate (\"EEEE\") = 2);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_99_closest_integer", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   function Closest_Integer (Value : String) return Integer;\n   -- Create a function that takes a value (string) representing a number\n   -- and returns the closest integer to it. If the number is equidistant\n   -- from two integers, round it away from zero.\n   -- Examples\n   -- >>> closest_integer(\"10\")\n   -- 10\n   -- >>> closest_integer(\"15.3\")\n   -- 15\n   -- Note:\n   -- Rounding away from zero means that if the given number is equidistant\n   -- from two integers, the one you should return is the one that is the\n   -- farthest from zero. For example closest_integer(\"14.5\") should\n   -- return 15 and closest_integer(\"-14.5\") should return -15.\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Closest_Integer (Value : String) return Integer", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_99_closest_integer.py", "prompt_terminology": "verbatim", "tests": "\n   end Closest_Integer;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Value : String) return Integer renames Placeholder.Closest_Integer;\n\nbegin\n   pragma Assert (Candidate (\"10\") = 10);\n   pragma Assert (Candidate (\"14.5\") = 15);\n   pragma Assert (Candidate (\"-15.5\") = -16);\n   pragma Assert (Candidate (\"15.3\") = 15);\n   pragma Assert (Candidate (\"0\") = 0);\nend Main;", "stop_tokens": ["\n   end "]}
{"name": "HumanEval_9_rolling_max", "language": "adb", "prompt": "pragma Ada_2012;\n\npackage Placeholder is\n   type Integer_Array is array (Integer range <>) of Integer;\n   function Rolling_Max (Numbers : Integer_Array) return Integer_Array;\n   -- From a given list of integers, generate a list of rolling maximum element found until given moment\n   -- in the sequence.\n   -- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n   -- [1, 2, 3, 3, 3, 4, 4]\n\nend Placeholder;\n\npragma Ada_2012;\n\npackage body Placeholder is\n   function Rolling_Max (Numbers : Integer_Array) return Integer_Array", "doctests": "keep", "original": "/home/walshe/projects/ai/MultiPL-E/datasets/../datasets/originals/HumanEval_9_rolling_max.py", "prompt_terminology": "verbatim", "tests": "\n   end Rolling_Max;\n\nend Placeholder;\n\npragma Ada_2012;\nwith Placeholder; use Placeholder;\n\nprocedure Main is\n   function Candidate (Numbers : Integer_Array) return Integer_Array renames Placeholder.Rolling_Max;\n\nbegin\n   pragma Assert (Candidate ((1 .. 0 => <>)) = (1 .. 0 => <>));\n   pragma Assert (Candidate ((1, 2, 3, 4)) = (1, 2, 3, 4));\n   pragma Assert (Candidate ((4, 3, 2, 1)) = (4, 4, 4, 4));\n   pragma Assert (Candidate ((3, 2, 3, 100, 3)) = (3, 3, 3, 100, 100));\nend Main;", "stop_tokens": ["\n   end "]}
